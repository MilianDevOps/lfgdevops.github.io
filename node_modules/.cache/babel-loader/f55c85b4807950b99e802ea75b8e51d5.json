{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node from '../core/Node.js';\nimport { vector } from '../core/NodeBuilder.js';\n\nvar SplitNode = /*#__PURE__*/function (_Node) {\n  _inherits(SplitNode, _Node);\n\n  var _super = _createSuper(SplitNode);\n\n  function SplitNode(node) {\n    var _this;\n\n    var components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\n    _classCallCheck(this, SplitNode);\n\n    _this = _super.call(this);\n    _this.node = node;\n    _this.components = components;\n    return _this;\n  }\n\n  _createClass(SplitNode, [{\n    key: \"getVectorLength\",\n    value: function getVectorLength() {\n      var vectorLength = this.components.length;\n\n      var _iterator = _createForOfIteratorHelper(this.components),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n          vectorLength = Math.max(vector.indexOf(c) + 1, vectorLength);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return vectorLength;\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return builder.getTypeFromLength(this.components.length);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var node = this.node;\n      var nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n\n      if (nodeTypeLength > 1) {\n        var type = null;\n        var componentsLength = this.getVectorLength();\n\n        if (componentsLength >= nodeTypeLength) {\n          // need expand the input node\n          type = builder.getTypeFromLength(this.getVectorLength());\n        }\n\n        var nodeSnippet = node.build(builder, type);\n        return \"\".concat(nodeSnippet, \".\").concat(this.components);\n      } else {\n        // ignore components if node is a float\n        return node.build(builder);\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(data) {\n      _get(_getPrototypeOf(SplitNode.prototype), \"serialize\", this).call(this, data);\n\n      data.components = this.components;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      _get(_getPrototypeOf(SplitNode.prototype), \"deserialize\", this).call(this, data);\n\n      this.components = data.components;\n    }\n  }]);\n\n  return SplitNode;\n}(Node);\n\nexport default SplitNode;","map":null,"metadata":{},"sourceType":"module"}