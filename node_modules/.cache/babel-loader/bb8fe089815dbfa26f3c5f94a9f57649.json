{"ast":null,"code":"import _asyncToGenerator from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Vector3, Ray, Loader, FileLoader, MeshStandardMaterial, LineBasicMaterial, ShaderMaterial, UniformsUtils, UniformsLib, Color, BufferGeometry, BufferAttribute, LineSegments, Mesh, Matrix4, Group } from 'three'; // Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\n\nvar FINISH_TYPE_DEFAULT = 0;\nvar FINISH_TYPE_CHROME = 1;\nvar FINISH_TYPE_PEARLESCENT = 2;\nvar FINISH_TYPE_RUBBER = 3;\nvar FINISH_TYPE_MATTE_METALLIC = 4;\nvar FINISH_TYPE_METAL = 5; // State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\n\nvar FILE_LOCATION_AS_IS = 0;\nvar FILE_LOCATION_TRY_PARTS = 1;\nvar FILE_LOCATION_TRY_P = 2;\nvar FILE_LOCATION_TRY_MODELS = 3;\nvar FILE_LOCATION_TRY_RELATIVE = 4;\nvar FILE_LOCATION_TRY_ABSOLUTE = 5;\nvar FILE_LOCATION_NOT_FOUND = 6;\nvar MAIN_COLOUR_CODE = '16';\nvar MAIN_EDGE_COLOUR_CODE = '24';\n\nvar _tempVec0 = new Vector3();\n\nvar _tempVec1 = new Vector3();\n\nvar LDrawConditionalLineMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(LDrawConditionalLineMaterial, _ShaderMaterial);\n\n  var _super = _createSuper(LDrawConditionalLineMaterial);\n\n  function LDrawConditionalLineMaterial(parameters) {\n    var _this;\n\n    _classCallCheck(this, LDrawConditionalLineMaterial);\n\n    _this = _super.call(this, {\n      uniforms: UniformsUtils.merge([UniformsLib.fog, {\n        diffuse: {\n          value: new Color()\n        },\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader:\n      /* glsl */\n      \"\\n        attribute vec3 control0;\\n        attribute vec3 control1;\\n        attribute vec3 direction;\\n        varying float discardFlag;\\n\\n        #include <common>\\n        #include <color_pars_vertex>\\n        #include <fog_pars_vertex>\\n        #include <logdepthbuf_pars_vertex>\\n        #include <clipping_planes_pars_vertex>\\n\\n        void main() {\\n          #include <color_vertex>\\n\\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n          gl_Position = projectionMatrix * mvPosition;\\n\\n          // Transform the line segment ends and control points into camera clip space\\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\\n\\n          c0.xy /= c0.w;\\n          c1.xy /= c1.w;\\n          p0.xy /= p0.w;\\n          p1.xy /= p1.w;\\n\\n          // Get the direction of the segment and an orthogonal vector\\n          vec2 dir = p1.xy - p0.xy;\\n          vec2 norm = vec2(-dir.y, dir.x);\\n\\n          // Get control point directions from the line\\n          vec2 c0dir = c0.xy - p1.xy;\\n          vec2 c1dir = c1.xy - p1.xy;\\n\\n          // If the vectors to the controls points are pointed in different directions away\\n          // from the line segment then the line should not be drawn.\\n          float d0 = dot(normalize(norm), normalize(c0dir));\\n          float d1 = dot(normalize(norm), normalize(c1dir));\\n          discardFlag = float(sign(d0) != sign(d1));\\n\\n          #include <logdepthbuf_vertex>\\n          #include <clipping_planes_vertex>\\n          #include <fog_vertex>\\n        }\\n      \",\n      fragmentShader:\n      /* glsl */\n      \"\\n        uniform vec3 diffuse;\\n        uniform float opacity;\\n        varying float discardFlag;\\n\\n        #include <common>\\n        #include <color_pars_fragment>\\n        #include <fog_pars_fragment>\\n        #include <logdepthbuf_pars_fragment>\\n        #include <clipping_planes_pars_fragment>\\n\\n        void main() {\\n          if (discardFlag > 0.5) discard;\\n\\n          #include <clipping_planes_fragment>\\n          vec3 outgoingLight = vec3(0.0);\\n          vec4 diffuseColor = vec4(diffuse, opacity);\\n          #include <logdepthbuf_fragment>\\n          #include <color_fragment>\\n          outgoingLight = diffuseColor.rgb; // simple shader\\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\\n          #include <tonemapping_fragment>\\n          #include <encodings_fragment>\\n          #include <fog_fragment>\\n          #include <premultiplied_alpha_fragment>\\n        }\\n      \"\n    });\n    Object.defineProperties(_assertThisInitialized(_this), {\n      opacity: {\n        get: function get() {\n          return this.uniforms.opacity.value;\n        },\n        set: function set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function get() {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n\n    _this.setValues(parameters);\n\n    _this.isLDrawConditionalLineMaterial = true;\n    return _this;\n  }\n\n  return _createClass(LDrawConditionalLineMaterial);\n}(ShaderMaterial);\n\nvar ConditionalLineSegments = /*#__PURE__*/function (_LineSegments) {\n  _inherits(ConditionalLineSegments, _LineSegments);\n\n  var _super2 = _createSuper(ConditionalLineSegments);\n\n  function ConditionalLineSegments(geometry, material) {\n    var _this2;\n\n    _classCallCheck(this, ConditionalLineSegments);\n\n    _this2 = _super2.call(this, geometry, material);\n    _this2.isConditionalLine = true;\n    return _this2;\n  }\n\n  return _createClass(ConditionalLineSegments);\n}(LineSegments);\n\nfunction generateFaceNormals(faces) {\n  for (var i = 0, l = faces.length; i < l; i++) {\n    var face = faces[i];\n    var vertices = face.vertices;\n    var v0 = vertices[0];\n    var v1 = vertices[1];\n    var v2 = vertices[2];\n\n    _tempVec0.subVectors(v1, v0);\n\n    _tempVec1.subVectors(v2, v1);\n\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\n\nvar _ray = new Ray();\n\nfunction smoothNormals(faces, lineSegments) {\n  var checkSubSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n  // it allows edges to be smoothed as expected (see minifig arms).\n  // --\n  // And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n  // point errors on vertices along quantization boundaries. Ie after matrix multiplication\n  // vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n  // get merged. This added epsilon attempts to push these error values to the same quantized\n  // value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n  var hashMultiplier = (1 + 1e-10) * 1e2;\n\n  function hashVertex(v) {\n    var x = ~~(v.x * hashMultiplier);\n    var y = ~~(v.y * hashMultiplier);\n    var z = ~~(v.z * hashMultiplier);\n    return \"\".concat(x, \",\").concat(y, \",\").concat(z);\n  }\n\n  function hashEdge(v0, v1) {\n    return \"\".concat(hashVertex(v0), \"_\").concat(hashVertex(v1));\n  } // converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n  // onto the original line.\n\n\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    var scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n\n  var hardEdges = new Set();\n  var hardEdgeRays = new Map();\n  var halfEdgeList = {};\n  var normals = []; // Save the list of hard edges by hash\n\n  for (var i = 0, l = lineSegments.length; i < l; i++) {\n    var ls = lineSegments[i];\n    var vertices = ls.vertices;\n    var v0 = vertices[0];\n    var v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0)); // only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n    // and requires more memory.\n\n    if (checkSubSegments) {\n      // add both ray directions to the map\n      var ray = toNormalizedRay(v0, v1, new Ray());\n      var rh1 = hashRay(ray);\n\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        var rh2 = hashRay(ray);\n        var _info = {\n          ray: ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, _info);\n        hardEdgeRays.set(rh2, _info);\n      } // store both segments ends in min, max order in the distances array to check if a face edge is a\n      // subsegment later.\n\n\n      var info = hardEdgeRays.get(rh1);\n      var d0 = info.ray.direction.dot(v0);\n      var d1 = info.ray.direction.dot(v1);\n\n      if (d0 > d1) {\n        var _ref = [d1, d0];\n        d0 = _ref[0];\n        d1 = _ref[1];\n      }\n\n      info.distances.push(d0, d1);\n    }\n  } // track the half edges associated with each triangle\n\n\n  for (var _i = 0, _l = faces.length; _i < _l; _i++) {\n    var tri = faces[_i];\n    var _vertices = tri.vertices;\n    var vertCount = _vertices.length;\n\n    for (var i2 = 0; i2 < vertCount; i2++) {\n      var index = i2;\n      var next = (i2 + 1) % vertCount;\n      var _v = _vertices[index];\n      var _v2 = _vertices[next];\n      var hash = hashEdge(_v, _v2); // don't add the triangle if the edge is supposed to be hard\n\n      if (hardEdges.has(hash)) {\n        continue;\n      } // if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\n\n      if (checkSubSegments) {\n        toNormalizedRay(_v, _v2, _ray);\n        var rayHash = hashRay(_ray);\n\n        if (hardEdgeRays.has(rayHash)) {\n          var _info3 = hardEdgeRays.get(rayHash);\n\n          var _ray2 = _info3.ray,\n              distances = _info3.distances;\n\n          var _d = _ray2.direction.dot(_v);\n\n          var _d2 = _ray2.direction.dot(_v2);\n\n          if (_d > _d2) {\n            var _ref2 = [_d2, _d];\n            _d = _ref2[0];\n            _d2 = _ref2[1];\n          } // return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\n\n          var found = false;\n\n          for (var _i2 = 0, _l2 = distances.length; _i2 < _l2; _i2 += 2) {\n            if (_d >= distances[_i2] && _d2 <= distances[_i2 + 1]) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found) {\n            continue;\n          }\n        }\n      }\n\n      var _info2 = {\n        index: index,\n        tri: tri\n      };\n      halfEdgeList[hash] = _info2;\n    }\n  } // Iterate until we've tried to connect all faces to share normals\n\n\n  while (true) {\n    // Stop if there are no more faces left\n    var halfEdge = null;\n\n    for (var key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n\n    if (halfEdge === null) {\n      break;\n    } // Exhaustively find all connected faces\n\n\n    var queue = [halfEdge];\n\n    while (queue.length > 0) {\n      // initialize all vertex normals in this triangle\n      var _tri = queue.pop().tri;\n      var _vertices2 = _tri.vertices;\n      var vertNormals = _tri.normals;\n      var faceNormal = _tri.faceNormal; // Check if any edge is connected to another triangle edge\n\n      var _vertCount = _vertices2.length;\n\n      for (var _i3 = 0; _i3 < _vertCount; _i3++) {\n        var _index = _i3;\n\n        var _next = (_i3 + 1) % _vertCount;\n\n        var _v3 = _vertices2[_index];\n        var _v4 = _vertices2[_next]; // delete this triangle from the list so it won't be found again\n\n        var _hash = hashEdge(_v3, _v4);\n\n        delete halfEdgeList[_hash];\n        var reverseHash = hashEdge(_v4, _v3);\n        var otherInfo = halfEdgeList[reverseHash];\n\n        if (otherInfo) {\n          var otherTri = otherInfo.tri;\n          var otherIndex = otherInfo.index;\n          var otherNormals = otherTri.normals;\n          var otherVertCount = otherNormals.length;\n          var otherFaceNormal = otherTri.faceNormal; // NOTE: If the angle between faces is > 67.5 degrees then assume it's\n          // hard edge. There are some cases where the line segments do not line up exactly\n          // with or span multiple triangle edges (see Lunar Vehicle wheels).\n\n          if (Math.abs(otherTri.faceNormal.dot(_tri.faceNormal)) < 0.25) {\n            continue;\n          } // if this triangle has already been traversed then it won't be in\n          // the halfEdgeList. If it has not then add it to the queue and delete\n          // it so it won't be found again.\n\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          } // share the first normal\n\n\n          var otherNext = (otherIndex + 1) % otherVertCount;\n\n          if (vertNormals[_index] && otherNormals[otherNext] && vertNormals[_index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[_index].norm);\n            vertNormals[_index].norm = otherNormals[otherNext].norm;\n          }\n\n          var sharedNormal1 = vertNormals[_index] || otherNormals[otherNext];\n\n          if (sharedNormal1 === null) {\n            // it's possible to encounter an edge of a triangle that has already been traversed meaning\n            // both edges already have different normals defined and shared. To work around this we create\n            // a wrapper object so when those edges are merged the normals can be updated everywhere.\n            sharedNormal1 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal1.norm);\n          }\n\n          if (vertNormals[_index] === null) {\n            vertNormals[_index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          } // share the second normal\n\n\n          if (vertNormals[_next] && otherNormals[otherIndex] && vertNormals[_next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[_next].norm);\n            vertNormals[_next].norm = otherNormals[otherIndex].norm;\n          }\n\n          var sharedNormal2 = vertNormals[_next] || otherNormals[otherIndex];\n\n          if (sharedNormal2 === null) {\n            sharedNormal2 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal2.norm);\n          }\n\n          if (vertNormals[_next] === null) {\n            vertNormals[_next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  } // The normals of each face have been added up so now we average them by normalizing the vector.\n\n\n  for (var _i4 = 0, _l3 = normals.length; _i4 < _l3; _i4++) {\n    normals[_i4].normalize();\n  }\n}\n\nfunction isPartType(type) {\n  return type === 'Part' || type === 'Unofficial_Part';\n}\n\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === 'Subpart';\n}\n\nvar LineParser = /*#__PURE__*/function () {\n  function LineParser(line, lineNumber) {\n    _classCallCheck(this, LineParser);\n\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = ' ';\n    this.lineNumber = lineNumber;\n  }\n\n  _createClass(LineParser, [{\n    key: \"seekNonSpace\",\n    value: function seekNonSpace() {\n      while (this.currentCharIndex < this.lineLength) {\n        this.currentChar = this.line.charAt(this.currentCharIndex);\n\n        if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n          return;\n        }\n\n        this.currentCharIndex++;\n      }\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var pos0 = this.currentCharIndex++; // Seek space\n\n      while (this.currentCharIndex < this.lineLength) {\n        this.currentChar = this.line.charAt(this.currentCharIndex);\n\n        if (this.currentChar === ' ' || this.currentChar === '\\t') {\n          break;\n        }\n\n        this.currentCharIndex++;\n      }\n\n      var pos1 = this.currentCharIndex;\n      this.seekNonSpace();\n      return this.line.substring(pos0, pos1);\n    }\n  }, {\n    key: \"getVector\",\n    value: function getVector() {\n      return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n    }\n  }, {\n    key: \"getRemainingString\",\n    value: function getRemainingString() {\n      return this.line.substring(this.currentCharIndex, this.lineLength);\n    }\n  }, {\n    key: \"isAtTheEnd\",\n    value: function isAtTheEnd() {\n      return this.currentCharIndex >= this.lineLength;\n    }\n  }, {\n    key: \"setToEnd\",\n    value: function setToEnd() {\n      this.currentCharIndex = this.lineLength;\n    }\n  }, {\n    key: \"getLineNumberString\",\n    value: function getLineNumberString() {\n      return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n    }\n  }]);\n\n  return LineParser;\n}(); // Fetches and parses an intermediate representation of LDraw parts files.\n\n\nvar LDrawParsedCache = /*#__PURE__*/function () {\n  function LDrawParsedCache(loader) {\n    _classCallCheck(this, LDrawParsedCache);\n\n    this.loader = loader;\n    this._cache = {};\n  }\n\n  _createClass(LDrawParsedCache, [{\n    key: \"cloneResult\",\n    value: function cloneResult(original) {\n      var result = {}; // vertices are transformed and normals computed before being converted to geometry\n      // so these pieces must be cloned.\n\n      result.faces = original.faces.map(function (face) {\n        return {\n          colorCode: face.colorCode,\n          material: face.material,\n          vertices: face.vertices.map(function (v) {\n            return v.clone();\n          }),\n          normals: face.normals.map(function () {\n            return null;\n          }),\n          faceNormal: null\n        };\n      });\n      result.conditionalSegments = original.conditionalSegments.map(function (face) {\n        return {\n          colorCode: face.colorCode,\n          material: face.material,\n          vertices: face.vertices.map(function (v) {\n            return v.clone();\n          }),\n          controlPoints: face.controlPoints.map(function (v) {\n            return v.clone();\n          })\n        };\n      });\n      result.lineSegments = original.lineSegments.map(function (face) {\n        return {\n          colorCode: face.colorCode,\n          material: face.material,\n          vertices: face.vertices.map(function (v) {\n            return v.clone();\n          })\n        };\n      }); // none if this is subsequently modified\n\n      result.type = original.type;\n      result.category = original.category;\n      result.keywords = original.keywords;\n      result.subobjects = original.subobjects;\n      result.totalFaces = original.totalFaces;\n      result.startingConstructionStep = original.startingConstructionStep;\n      result.materials = original.materials;\n      result.group = null;\n      return result;\n    }\n  }, {\n    key: \"fetchData\",\n    value: function () {\n      var _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileName) {\n        var triedLowerCase, locationState, subobjectURL, loader, fileLoader, text;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                triedLowerCase = false;\n                locationState = FILE_LOCATION_AS_IS;\n\n              case 2:\n                if (!(locationState !== FILE_LOCATION_NOT_FOUND)) {\n                  _context.next = 40;\n                  break;\n                }\n\n                subobjectURL = fileName;\n                _context.t0 = locationState;\n                _context.next = _context.t0 === FILE_LOCATION_AS_IS ? 7 : _context.t0 === FILE_LOCATION_TRY_PARTS ? 9 : _context.t0 === FILE_LOCATION_TRY_P ? 12 : _context.t0 === FILE_LOCATION_TRY_MODELS ? 15 : _context.t0 === FILE_LOCATION_TRY_RELATIVE ? 18 : _context.t0 === FILE_LOCATION_TRY_ABSOLUTE ? 21 : 23;\n                break;\n\n              case 7:\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n\n              case 9:\n                subobjectURL = 'parts/' + subobjectURL;\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n\n              case 12:\n                subobjectURL = 'p/' + subobjectURL;\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n\n              case 15:\n                subobjectURL = 'models/' + subobjectURL;\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n\n              case 18:\n                subobjectURL = fileName.substring(0, fileName.lastIndexOf('/') + 1) + subobjectURL;\n                locationState = locationState + 1;\n                return _context.abrupt(\"break\", 23);\n\n              case 21:\n                if (triedLowerCase) {\n                  // Try absolute path\n                  locationState = FILE_LOCATION_NOT_FOUND;\n                } else {\n                  // Next attempt is lower case\n                  fileName = fileName.toLowerCase();\n                  subobjectURL = fileName;\n                  triedLowerCase = true;\n                  locationState = FILE_LOCATION_AS_IS;\n                }\n\n                return _context.abrupt(\"break\", 23);\n\n              case 23:\n                loader = this.loader;\n                fileLoader = new FileLoader(loader.manager);\n                fileLoader.setPath(loader.partsLibraryPath);\n                fileLoader.setRequestHeader(loader.requestHeader);\n                fileLoader.setWithCredentials(loader.withCredentials);\n                _context.prev = 28;\n                _context.next = 31;\n                return fileLoader.loadAsync(subobjectURL);\n\n              case 31:\n                text = _context.sent;\n                return _context.abrupt(\"return\", text);\n\n              case 35:\n                _context.prev = 35;\n                _context.t1 = _context[\"catch\"](28);\n                return _context.abrupt(\"continue\", 2);\n\n              case 38:\n                _context.next = 2;\n                break;\n\n              case 40:\n                throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[28, 35]]);\n      }));\n\n      function fetchData(_x) {\n        return _fetchData.apply(this, arguments);\n      }\n\n      return fetchData;\n    }()\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var loader = this.loader; // final results\n\n      var faces = [];\n      var lineSegments = [];\n      var conditionalSegments = [];\n      var subobjects = [];\n      var materials = {};\n\n      var getLocalMaterial = function getLocalMaterial(colorCode) {\n        return materials[colorCode] || null;\n      };\n\n      var type = 'Model';\n      var category = null;\n      var keywords = null;\n      var totalFaces = 0; // split into lines\n\n      if (text.indexOf('\\r\\n') !== -1) {\n        // This is faster than String.split with regex that splits on both\n        text = text.replace(/\\r\\n/g, '\\n');\n      }\n\n      var lines = text.split('\\n');\n      var numLines = lines.length;\n      var parsingEmbeddedFiles = false;\n      var currentEmbeddedFileName = null;\n      var currentEmbeddedText = null;\n      var bfcCertified = false;\n      var bfcCCW = true;\n      var bfcInverted = false;\n      var bfcCull = true;\n      var startingConstructionStep = false; // Parse all line commands\n\n      for (var lineIndex = 0; lineIndex < numLines; lineIndex++) {\n        var line = lines[lineIndex];\n        if (line.length === 0) continue;\n\n        if (parsingEmbeddedFiles) {\n          if (line.startsWith('0 FILE ')) {\n            // Save previous embedded file in the cache\n            this.setData(currentEmbeddedFileName, currentEmbeddedText); // New embedded text file\n\n            currentEmbeddedFileName = line.substring(7);\n            currentEmbeddedText = '';\n          } else {\n            currentEmbeddedText += line + '\\n';\n          }\n\n          continue;\n        }\n\n        var lp = new LineParser(line, lineIndex + 1);\n        lp.seekNonSpace();\n\n        if (lp.isAtTheEnd()) {\n          // Empty line\n          continue;\n        } // Parse the line type\n\n\n        var lineType = lp.getToken();\n        var material = void 0;\n        var colorCode = void 0;\n        var segment = void 0;\n        var ccw = void 0;\n        var doubleSided = void 0;\n        var v0 = void 0,\n            v1 = void 0,\n            v2 = void 0,\n            v3 = void 0,\n            c0 = void 0,\n            c1 = void 0;\n\n        switch (lineType) {\n          // Line type 0: Comment or META\n          case '0':\n            // Parse meta directive\n            var meta = lp.getToken();\n\n            if (meta) {\n              switch (meta) {\n                case '!LDRAW_ORG':\n                  type = lp.getToken();\n                  break;\n\n                case '!COLOUR':\n                  material = loader.parseColorMetaDirective(lp);\n\n                  if (material) {\n                    materials[material.userData.code] = material;\n                  } else {\n                    console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                  }\n\n                  break;\n\n                case '!CATEGORY':\n                  category = lp.getToken();\n                  break;\n\n                case '!KEYWORDS':\n                  var newKeywords = lp.getRemainingString().split(',');\n\n                  if (newKeywords.length > 0) {\n                    if (!keywords) {\n                      keywords = [];\n                    }\n\n                    newKeywords.forEach(function (keyword) {\n                      keywords.push(keyword.trim());\n                    });\n                  }\n\n                  break;\n\n                case 'FILE':\n                  if (lineIndex > 0) {\n                    // Start embedded text files parsing\n                    parsingEmbeddedFiles = true;\n                    currentEmbeddedFileName = lp.getRemainingString();\n                    currentEmbeddedText = '';\n                    bfcCertified = false;\n                    bfcCCW = true;\n                  }\n\n                  break;\n\n                case 'BFC':\n                  // Changes to the backface culling state\n                  while (!lp.isAtTheEnd()) {\n                    var token = lp.getToken();\n\n                    switch (token) {\n                      case 'CERTIFY':\n                      case 'NOCERTIFY':\n                        bfcCertified = token === 'CERTIFY';\n                        bfcCCW = true;\n                        break;\n\n                      case 'CW':\n                      case 'CCW':\n                        bfcCCW = token === 'CCW';\n                        break;\n\n                      case 'INVERTNEXT':\n                        bfcInverted = true;\n                        break;\n\n                      case 'CLIP':\n                      case 'NOCLIP':\n                        bfcCull = token === 'CLIP';\n                        break;\n\n                      default:\n                        console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                        break;\n                    }\n                  }\n\n                  break;\n\n                case 'STEP':\n                  startingConstructionStep = true;\n                  break;\n              }\n            }\n\n            break;\n          // Line type 1: Sub-object file\n\n          case '1':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            var posX = parseFloat(lp.getToken());\n            var posY = parseFloat(lp.getToken());\n            var posZ = parseFloat(lp.getToken());\n            var m0 = parseFloat(lp.getToken());\n            var m1 = parseFloat(lp.getToken());\n            var m2 = parseFloat(lp.getToken());\n            var m3 = parseFloat(lp.getToken());\n            var m4 = parseFloat(lp.getToken());\n            var m5 = parseFloat(lp.getToken());\n            var m6 = parseFloat(lp.getToken());\n            var m7 = parseFloat(lp.getToken());\n            var m8 = parseFloat(lp.getToken());\n            var matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n\n            var _fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n\n            if (loader.fileMap[_fileName]) {\n              // Found the subobject path in the preloaded file path map\n              _fileName = loader.fileMap[_fileName];\n            } else {\n              // Standardized subfolders\n              if (_fileName.startsWith('s/')) {\n                _fileName = 'parts/' + _fileName;\n              } else if (_fileName.startsWith('48/')) {\n                _fileName = 'p/' + _fileName;\n              }\n            }\n\n            subobjects.push({\n              material: material,\n              colorCode: colorCode,\n              matrix: matrix,\n              fileName: _fileName,\n              inverted: bfcInverted,\n              startingConstructionStep: startingConstructionStep\n            });\n            bfcInverted = false;\n            break;\n          // Line type 2: Line segment\n\n          case '2':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            segment = {\n              material: material,\n              colorCode: colorCode,\n              vertices: [v0, v1]\n            };\n            lineSegments.push(segment);\n            break;\n          // Line type 5: Conditional Line segment\n\n          case '5':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            c0 = lp.getVector();\n            c1 = lp.getVector();\n            segment = {\n              material: material,\n              colorCode: colorCode,\n              vertices: [v0, v1],\n              controlPoints: [c0, c1]\n            };\n            conditionalSegments.push(segment);\n            break;\n          // Line type 3: Triangle\n\n          case '3':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            ccw = bfcCCW;\n            doubleSided = !bfcCertified || !bfcCull;\n\n            if (ccw === true) {\n              v0 = lp.getVector();\n              v1 = lp.getVector();\n              v2 = lp.getVector();\n            } else {\n              v2 = lp.getVector();\n              v1 = lp.getVector();\n              v0 = lp.getVector();\n            }\n\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v0, v1, v2],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n\n            if (doubleSided === true) {\n              faces.push({\n                material: material,\n                colorCode: colorCode,\n                faceNormal: null,\n                vertices: [v2, v1, v0],\n                normals: [null, null, null]\n              });\n              totalFaces++;\n            }\n\n            break;\n          // Line type 4: Quadrilateral\n\n          case '4':\n            colorCode = lp.getToken();\n            material = getLocalMaterial(colorCode);\n            ccw = bfcCCW;\n            doubleSided = !bfcCertified || !bfcCull;\n\n            if (ccw === true) {\n              v0 = lp.getVector();\n              v1 = lp.getVector();\n              v2 = lp.getVector();\n              v3 = lp.getVector();\n            } else {\n              v3 = lp.getVector();\n              v2 = lp.getVector();\n              v1 = lp.getVector();\n              v0 = lp.getVector();\n            } // specifically place the triangle diagonal in the v0 and v1 slots so we can\n            // account for the doubling of vertices later when smoothing normals.\n\n\n            faces.push({\n              material: material,\n              colorCode: colorCode,\n              faceNormal: null,\n              vertices: [v0, v1, v2, v3],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n\n            if (doubleSided === true) {\n              faces.push({\n                material: material,\n                colorCode: colorCode,\n                faceNormal: null,\n                vertices: [v3, v2, v1, v0],\n                normals: [null, null, null, null]\n              });\n              totalFaces += 2;\n            }\n\n            break;\n\n          default:\n            throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.');\n        }\n      }\n\n      if (parsingEmbeddedFiles) {\n        this.setData(currentEmbeddedFileName, currentEmbeddedText);\n      }\n\n      return {\n        faces: faces,\n        conditionalSegments: conditionalSegments,\n        lineSegments: lineSegments,\n        type: type,\n        category: category,\n        keywords: keywords,\n        subobjects: subobjects,\n        totalFaces: totalFaces,\n        startingConstructionStep: startingConstructionStep,\n        materials: materials,\n        fileName: fileName,\n        group: null\n      };\n    } // returns an (optionally cloned) instance of the data\n\n  }, {\n    key: \"getData\",\n    value: function getData(fileName) {\n      var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var key = fileName.toLowerCase();\n      var result = this._cache[key];\n\n      if (result === null || result instanceof Promise) {\n        return null;\n      }\n\n      if (clone) {\n        return this.cloneResult(result);\n      } else {\n        return result;\n      }\n    } // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n    // the data is ready to use and can be retrieved synchronously with \"getData\".\n\n  }, {\n    key: \"ensureDataLoaded\",\n    value: function () {\n      var _ensureDataLoaded = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fileName) {\n        var _this3 = this;\n\n        var key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                key = fileName.toLowerCase();\n\n                if (!(key in this._cache)) {\n                  // replace the promise with a copy of the parsed data for immediate processing\n                  this._cache[key] = this.fetchData(fileName).then(function (text) {\n                    var info = _this3.parse(text, fileName);\n\n                    _this3._cache[key] = info;\n                    return info;\n                  });\n                }\n\n                _context2.next = 4;\n                return this._cache[key];\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function ensureDataLoaded(_x2) {\n        return _ensureDataLoaded.apply(this, arguments);\n      }\n\n      return ensureDataLoaded;\n    }() // sets the data in the cache from parsed data\n\n  }, {\n    key: \"setData\",\n    value: function setData(fileName, text) {\n      var key = fileName.toLowerCase();\n      this._cache[key] = this.parse(text, fileName);\n    }\n  }]);\n\n  return LDrawParsedCache;\n}(); // returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\n\n\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  var isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n\n  return materialHierarchy[colorCode] || null;\n} // Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\n\n\nvar LDrawPartsGeometryCache = /*#__PURE__*/function () {\n  function LDrawPartsGeometryCache(loader) {\n    _classCallCheck(this, LDrawPartsGeometryCache);\n\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  } // Convert the given file information into a mesh by processing subobjects.\n\n\n  _createClass(LDrawPartsGeometryCache, [{\n    key: \"processIntoMesh\",\n    value: function () {\n      var _processIntoMesh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(info) {\n        var _this4 = this;\n\n        var loader, parseCache, faceMaterials, processInfoSubobjects, i, l, checkSubSegments, group;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                loader = this.loader;\n                parseCache = this.parseCache;\n                faceMaterials = new Set(); // Processes the part subobject information to load child parts and merge geometry onto part\n                // piece object.\n\n                processInfoSubobjects = /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(info) {\n                    var subobject,\n                        subobjects,\n                        promises,\n                        _loop,\n                        i,\n                        l,\n                        group,\n                        subobjectInfos,\n                        _i5,\n                        _l4,\n                        _subobject,\n                        subobjectInfo,\n                        subobjectGroup,\n                        parentLineSegments,\n                        parentConditionalSegments,\n                        parentFaces,\n                        lineSegments,\n                        conditionalSegments,\n                        faces,\n                        matrix,\n                        inverted,\n                        matrixScaleInverted,\n                        colorCode,\n                        lineColorCode,\n                        _i6,\n                        _l5,\n                        ls,\n                        vertices,\n                        _i7,\n                        _l6,\n                        os,\n                        _vertices3,\n                        controlPoints,\n                        _i8,\n                        _l7,\n                        tri,\n                        _vertices4,\n                        _i9,\n                        _l8,\n                        _args3 = arguments;\n\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            subobject = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : null;\n                            subobjects = info.subobjects;\n                            promises = []; // Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n                            // group which lets instruction steps apply correctly.\n\n                            _loop = function _loop(i, l) {\n                              var subobject = subobjects[i];\n                              var promise = parseCache.ensureDataLoaded(subobject.fileName).then(function () {\n                                var subobjectInfo = parseCache.getData(subobject.fileName, false);\n\n                                if (!isPrimitiveType(subobjectInfo.type)) {\n                                  return _this4.loadModel(subobject.fileName).catch(function (error) {\n                                    console.warn(error);\n                                    return null;\n                                  });\n                                }\n\n                                return processInfoSubobjects(parseCache.getData(subobject.fileName), subobject);\n                              });\n                              promises.push(promise);\n                            };\n\n                            for (i = 0, l = subobjects.length; i < l; i++) {\n                              _loop(i, l);\n                            }\n\n                            group = new Group();\n                            group.userData.category = info.category;\n                            group.userData.keywords = info.keywords;\n                            info.group = group;\n                            _context3.next = 11;\n                            return Promise.all(promises);\n\n                          case 11:\n                            subobjectInfos = _context3.sent;\n                            _i5 = 0, _l4 = subobjectInfos.length;\n\n                          case 13:\n                            if (!(_i5 < _l4)) {\n                              _context3.next = 45;\n                              break;\n                            }\n\n                            _subobject = info.subobjects[_i5];\n                            subobjectInfo = subobjectInfos[_i5];\n\n                            if (!(subobjectInfo === null)) {\n                              _context3.next = 18;\n                              break;\n                            }\n\n                            return _context3.abrupt(\"continue\", 42);\n\n                          case 18:\n                            if (!subobjectInfo.isGroup) {\n                              _context3.next = 26;\n                              break;\n                            }\n\n                            subobjectGroup = subobjectInfo;\n\n                            _subobject.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n\n                            subobjectGroup.userData.startingConstructionStep = _subobject.startingConstructionStep;\n                            subobjectGroup.name = _subobject.fileName;\n                            loader.applyMaterialsToMesh(subobjectGroup, _subobject.colorCode, info.materials);\n                            group.add(subobjectGroup);\n                            return _context3.abrupt(\"continue\", 42);\n\n                          case 26:\n                            // add the subobject group if it has children in case it has both children and primitives\n                            if (subobjectInfo.group.children.length) {\n                              group.add(subobjectInfo.group);\n                            } // transform the primitives into the local space of the parent piece and append them to\n                            // to the parent primitives list.\n\n\n                            parentLineSegments = info.lineSegments;\n                            parentConditionalSegments = info.conditionalSegments;\n                            parentFaces = info.faces;\n                            lineSegments = subobjectInfo.lineSegments;\n                            conditionalSegments = subobjectInfo.conditionalSegments;\n                            faces = subobjectInfo.faces;\n                            matrix = _subobject.matrix;\n                            inverted = _subobject.inverted;\n                            matrixScaleInverted = matrix.determinant() < 0;\n                            colorCode = _subobject.colorCode;\n                            lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n\n                            for (_i6 = 0, _l5 = lineSegments.length; _i6 < _l5; _i6++) {\n                              ls = lineSegments[_i6];\n                              vertices = ls.vertices;\n                              vertices[0].applyMatrix4(matrix);\n                              vertices[1].applyMatrix4(matrix);\n                              ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n                              ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info.materials, true);\n                              parentLineSegments.push(ls);\n                            }\n\n                            for (_i7 = 0, _l6 = conditionalSegments.length; _i7 < _l6; _i7++) {\n                              os = conditionalSegments[_i7];\n                              _vertices3 = os.vertices;\n                              controlPoints = os.controlPoints;\n\n                              _vertices3[0].applyMatrix4(matrix);\n\n                              _vertices3[1].applyMatrix4(matrix);\n\n                              controlPoints[0].applyMatrix4(matrix);\n                              controlPoints[1].applyMatrix4(matrix);\n                              os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n                              os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info.materials, true);\n                              parentConditionalSegments.push(os);\n                            }\n\n                            for (_i8 = 0, _l7 = faces.length; _i8 < _l7; _i8++) {\n                              tri = faces[_i8];\n                              _vertices4 = tri.vertices;\n\n                              for (_i9 = 0, _l8 = _vertices4.length; _i9 < _l8; _i9++) {\n                                _vertices4[_i9].applyMatrix4(matrix);\n                              }\n\n                              tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n                              tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info.materials, false);\n                              faceMaterials.add(tri.colorCode); // If the scale of the object is negated then the triangle winding order\n                              // needs to be flipped.\n\n                              if (matrixScaleInverted !== inverted) {\n                                _vertices4.reverse();\n                              }\n\n                              parentFaces.push(tri);\n                            }\n\n                            info.totalFaces += subobjectInfo.totalFaces;\n\n                          case 42:\n                            _i5++;\n                            _context3.next = 13;\n                            break;\n\n                          case 45:\n                            // Apply the parent subobjects pass through material code to this object. This is done several times due\n                            // to material scoping.\n                            if (subobject) {\n                              loader.applyMaterialsToMesh(group, subobject.colorCode, info.materials);\n                            }\n\n                            return _context3.abrupt(\"return\", info);\n\n                          case 47:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function processInfoSubobjects(_x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }(); // Track material use to see if we need to use the normal smooth slow path for hard edges.\n\n\n                for (i = 0, l = info.faces; i < l; i++) {\n                  faceMaterials.add(info.faces[i].colorCode);\n                }\n\n                _context4.next = 7;\n                return processInfoSubobjects(info);\n\n              case 7:\n                if (loader.smoothNormals) {\n                  checkSubSegments = faceMaterials.size > 1;\n                  generateFaceNormals(info.faces);\n                  smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n                } // Add the primitive objects and metadata.\n\n\n                group = info.group;\n\n                if (info.faces.length > 0) {\n                  group.add(createObject(info.faces, 3, false, info.totalFaces));\n                }\n\n                if (info.lineSegments.length > 0) {\n                  group.add(createObject(info.lineSegments, 2));\n                }\n\n                if (info.conditionalSegments.length > 0) {\n                  group.add(createObject(info.conditionalSegments, 2, true));\n                }\n\n                return _context4.abrupt(\"return\", group);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function processIntoMesh(_x3) {\n        return _processIntoMesh.apply(this, arguments);\n      }\n\n      return processIntoMesh;\n    }()\n  }, {\n    key: \"hasCachedModel\",\n    value: function hasCachedModel(fileName) {\n      return fileName !== null && fileName.toLowerCase() in this._cache;\n    }\n  }, {\n    key: \"getCachedModel\",\n    value: function () {\n      var _getCachedModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(fileName) {\n        var key, group;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(fileName !== null && this.hasCachedModel(fileName))) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                key = fileName.toLowerCase();\n                _context5.next = 4;\n                return this._cache[key];\n\n              case 4:\n                group = _context5.sent;\n                return _context5.abrupt(\"return\", group.clone());\n\n              case 8:\n                return _context5.abrupt(\"return\", null);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getCachedModel(_x5) {\n        return _getCachedModel.apply(this, arguments);\n      }\n\n      return getCachedModel;\n    }() // Loads and parses the model with the given file name. Returns a cached copy if available.\n\n  }, {\n    key: \"loadModel\",\n    value: function () {\n      var _loadModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fileName) {\n        var parseCache, key, info, promise, group;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                parseCache = this.parseCache;\n                key = fileName.toLowerCase();\n\n                if (!this.hasCachedModel(fileName)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", this.getCachedModel(fileName));\n\n              case 6:\n                _context6.next = 8;\n                return parseCache.ensureDataLoaded(fileName);\n\n              case 8:\n                info = parseCache.getData(fileName);\n                promise = this.processIntoMesh(info); // Now that the file has loaded it's possible that another part parse has been waiting in parallel\n                // so check the cache again to see if it's been added since the last async operation so we don't\n                // do unnecessary work.\n\n                if (!this.hasCachedModel(fileName)) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", this.getCachedModel(fileName));\n\n              case 12:\n                // Cache object if it's a part so it can be reused later.\n                if (isPartType(info.type)) {\n                  this._cache[key] = promise;\n                } // return a copy\n\n\n                _context6.next = 15;\n                return promise;\n\n              case 15:\n                group = _context6.sent;\n                return _context6.abrupt(\"return\", group.clone());\n\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function loadModel(_x6) {\n        return _loadModel.apply(this, arguments);\n      }\n\n      return loadModel;\n    }() // parses the given model text into a renderable object. Returns cached copy if available.\n\n  }, {\n    key: \"parseModel\",\n    value: function () {\n      var _parseModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(text) {\n        var parseCache, info;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                parseCache = this.parseCache;\n                info = parseCache.parse(text);\n\n                if (!(isPartType(info.type) && this.hasCachedModel(info.fileName))) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", this.getCachedModel(info.fileName));\n\n              case 4:\n                return _context7.abrupt(\"return\", this.processIntoMesh(info));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function parseModel(_x7) {\n        return _parseModel.apply(this, arguments);\n      }\n\n      return parseModel;\n    }()\n  }]);\n\n  return LDrawPartsGeometryCache;\n}();\n\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction createObject(elements, elementSize) {\n  var isConditionalSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var totalElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  // Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n  // With per face / segment material, implemented with mesh groups and materials array\n  // Sort the faces or line segments by color code to make later the mesh groups\n  elements.sort(sortByMaterial);\n\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n\n  var positions = new Float32Array(elementSize * totalElements * 3);\n  var normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  var materials = [];\n  var quadArray = new Array(6);\n  var bufferGeometry = new BufferGeometry();\n  var prevMaterial = null;\n  var index0 = 0;\n  var numGroupVerts = 0;\n  var offset = 0;\n\n  for (var iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    var elem = elements[iElem];\n    var vertices = elem.vertices;\n\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n\n    for (var j = 0, l = vertices.length; j < l; j++) {\n      var v = vertices[j];\n      var index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    } // create the normals array if this is a set of faces\n\n\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        var v0 = vertices[0];\n        var v1 = vertices[1];\n        var v2 = vertices[2];\n\n        _tempVec0.subVectors(v1, v0);\n\n        _tempVec1.subVectors(v2, v1);\n\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n\n      var elemNormals = elem.normals;\n\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n\n      for (var _j = 0, _l9 = elemNormals.length; _j < _l9; _j++) {\n        // use face normal if a vertex normal is not provided\n        var n = elem.faceNormal;\n\n        if (elemNormals[_j]) {\n          n = elemNormals[_j].norm;\n        }\n\n        var _index2 = offset + _j * 3;\n\n        normals[_index2 + 0] = n.x;\n        normals[_index2 + 1] = n.y;\n        normals[_index2 + 2] = n.z;\n      }\n    }\n\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n\n      var material = elem.material;\n\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        // If a material has not been made available yet then keep the color code string in the material array\n        // to save the spot for the material once a parent scopes materials are being applied to the object.\n        materials.push(elem.colorCode);\n      }\n\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n\n    offset += 3 * vertices.length;\n  }\n\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n\n  bufferGeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\n  if (normals !== null) {\n    bufferGeometry.setAttribute('normal', new BufferAttribute(normals, 3));\n  }\n\n  var object3d = null;\n\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    var controlArray0 = new Float32Array(elements.length * 3 * 2);\n    var controlArray1 = new Float32Array(elements.length * 3 * 2);\n    var directionArray = new Float32Array(elements.length * 3 * 2);\n\n    for (var i = 0, _l10 = elements.length; i < _l10; i++) {\n      var os = elements[i];\n      var _vertices5 = os.vertices;\n      var controlPoints = os.controlPoints;\n      var c0 = controlPoints[0];\n      var c1 = controlPoints[1];\n      var _v5 = _vertices5[0];\n      var _v6 = _vertices5[1];\n\n      var _index3 = i * 3 * 2;\n\n      controlArray0[_index3 + 0] = c0.x;\n      controlArray0[_index3 + 1] = c0.y;\n      controlArray0[_index3 + 2] = c0.z;\n      controlArray0[_index3 + 3] = c0.x;\n      controlArray0[_index3 + 4] = c0.y;\n      controlArray0[_index3 + 5] = c0.z;\n      controlArray1[_index3 + 0] = c1.x;\n      controlArray1[_index3 + 1] = c1.y;\n      controlArray1[_index3 + 2] = c1.z;\n      controlArray1[_index3 + 3] = c1.x;\n      controlArray1[_index3 + 4] = c1.y;\n      controlArray1[_index3 + 5] = c1.z;\n      directionArray[_index3 + 0] = _v6.x - _v5.x;\n      directionArray[_index3 + 1] = _v6.y - _v5.y;\n      directionArray[_index3 + 2] = _v6.z - _v5.z;\n      directionArray[_index3 + 3] = _v6.x - _v5.x;\n      directionArray[_index3 + 4] = _v6.y - _v5.y;\n      directionArray[_index3 + 5] = _v6.z - _v5.z;\n    }\n\n    bufferGeometry.setAttribute('control0', new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute('control1', new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute('direction', new BufferAttribute(directionArray, 3, false));\n  }\n\n  return object3d;\n} //\n\n\nvar LDrawLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LDrawLoader, _Loader);\n\n  var _super3 = _createSuper(LDrawLoader);\n\n  function LDrawLoader(manager) {\n    var _this5;\n\n    _classCallCheck(this, LDrawLoader);\n\n    _this5 = _super3.call(this, manager); // Array of THREE.Material\n\n    _this5.materials = [];\n    _this5.materialLibrary = {}; // This also allows to handle the embedded text files (\"0 FILE\" lines)\n\n    _this5.partsCache = new LDrawPartsGeometryCache(_assertThisInitialized(_this5)); // This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\n    _this5.fileMap = {}; // Initializes the materials library with default materials\n\n    _this5.setMaterials([]); // If this flag is set to true the vertex normals will be smoothed.\n\n\n    _this5.smoothNormals = true; // The path to load parts from the LDraw parts library from.\n\n    _this5.partsLibraryPath = '';\n    return _this5;\n  }\n\n  _createClass(LDrawLoader, [{\n    key: \"setPartsLibraryPath\",\n    value: function setPartsLibraryPath(path) {\n      this.partsLibraryPath = path;\n      return this;\n    }\n  }, {\n    key: \"preloadMaterials\",\n    value: function () {\n      var _preloadMaterials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(url) {\n        var fileLoader, text, colorLineRegex, lines, materials, i, l, line, directive, material;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                fileLoader = new FileLoader(this.manager);\n                fileLoader.setPath(this.path);\n                fileLoader.setRequestHeader(this.requestHeader);\n                fileLoader.setWithCredentials(this.withCredentials);\n                _context8.next = 6;\n                return fileLoader.loadAsync(url);\n\n              case 6:\n                text = _context8.sent;\n                colorLineRegex = /^0 !COLOUR/;\n                lines = text.split(/[\\n\\r]/g);\n                materials = [];\n\n                for (i = 0, l = lines.length; i < l; i++) {\n                  line = lines[i];\n\n                  if (colorLineRegex.test(line)) {\n                    directive = line.replace(colorLineRegex, '');\n                    material = this.parseColorMetaDirective(new LineParser(directive));\n                    materials.push(material);\n                  }\n                }\n\n                this.setMaterials(materials);\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function preloadMaterials(_x8) {\n        return _preloadMaterials.apply(this, arguments);\n      }\n\n      return preloadMaterials;\n    }()\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this6 = this;\n\n      var fileLoader = new FileLoader(this.manager);\n      fileLoader.setPath(this.path);\n      fileLoader.setRequestHeader(this.requestHeader);\n      fileLoader.setWithCredentials(this.withCredentials);\n      fileLoader.load(url, function (text) {\n        _this6.partsCache.parseModel(text, _this6.materialLibrary).then(function (group) {\n          _this6.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, _this6.materialLibrary, true);\n\n          _this6.computeConstructionSteps(group);\n\n          onLoad(group);\n        }).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text, onLoad) {\n      var _this7 = this;\n\n      this.partsCache.parseModel(text, this.materialLibrary).then(function (group) {\n        _this7.computeConstructionSteps(group);\n\n        onLoad(group);\n      });\n    }\n  }, {\n    key: \"setMaterials\",\n    value: function setMaterials(materials) {\n      this.materialLibrary = {};\n      this.materials = [];\n\n      for (var i = 0, l = materials.length; i < l; i++) {\n        this.addMaterial(materials[i]);\n      } // Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\n\n      this.addMaterial(this.parseColorMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')));\n      this.addMaterial(this.parseColorMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333')));\n      return this;\n    }\n  }, {\n    key: \"setFileMap\",\n    value: function setFileMap(fileMap) {\n      this.fileMap = fileMap;\n      return this;\n    }\n  }, {\n    key: \"addMaterial\",\n    value: function addMaterial(material) {\n      // Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n      var matLib = this.materialLibrary;\n\n      if (!matLib[material.userData.code]) {\n        this.materials.push(material);\n        matLib[material.userData.code] = material;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getMaterial\",\n    value: function getMaterial(colorCode) {\n      if (colorCode.startsWith('0x2')) {\n        // Special 'direct' material value (RGB color)\n        var color = colorCode.substring(3);\n        return this.parseColorMetaDirective(new LineParser('Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + ''));\n      }\n\n      return this.materialLibrary[colorCode] || null;\n    } // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n    // in the material array if they need to be filled in.\n\n  }, {\n    key: \"applyMaterialsToMesh\",\n    value: function applyMaterialsToMesh(group, parentColorCode, materialHierarchy) {\n      var finalMaterialPass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      // find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n      var loader = this;\n      var parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n      group.traverse(function (c) {\n        if (c.isMesh || c.isLineSegments) {\n          if (Array.isArray(c.material)) {\n            for (var i = 0, l = c.material.length; i < l; i++) {\n              if (!c.material[i].isMaterial) {\n                c.material[i] = getMaterial(c, c.material[i]);\n              }\n            }\n          } else if (!c.material.isMaterial) {\n            c.material = getMaterial(c, c.material);\n          }\n        }\n      }); // Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n      // (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n      // simply returned for the subsequent material application.\n\n      function getMaterial(c, colorCode) {\n        // if our parent is a passthrough color code and we don't have the current material color available then\n        // return early.\n        if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n          return colorCode;\n        }\n\n        var forEdge = c.isLineSegments || c.isConditionalLine;\n        var isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n        if (isPassthrough) {\n          colorCode = parentColorCode;\n        }\n\n        var material = null;\n\n        if (colorCode in materialHierarchy) {\n          material = materialHierarchy[colorCode];\n        } else if (finalMaterialPass) {\n          // see if we can get the final material from from the \"getMaterial\" function which will attempt to\n          // parse the \"direct\" colors\n          material = loader.getMaterial(colorCode);\n\n          if (material === null) {\n            // otherwise throw an error if this is final opportunity to set the material\n            throw new Error(\"LDrawLoader: Material properties for code \".concat(colorCode, \" not available.\"));\n          }\n        } else {\n          return colorCode;\n        }\n\n        if (c.isLineSegments) {\n          material = material.userData.edgeMaterial;\n\n          if (c.isConditionalLine) {\n            material = material.userData.conditionalEdgeMaterial;\n          }\n        }\n\n        return material;\n      }\n    }\n  }, {\n    key: \"getMainMaterial\",\n    value: function getMainMaterial() {\n      return this.getMaterial(MAIN_COLOUR_CODE);\n    }\n  }, {\n    key: \"getMainEdgeMaterial\",\n    value: function getMainEdgeMaterial() {\n      return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n    }\n  }, {\n    key: \"parseColorMetaDirective\",\n    value: function parseColorMetaDirective(lineParser) {\n      // Parses a color definition and returns a THREE.Material\n      var code = null; // Triangle and line colors\n\n      var color = 0xff00ff;\n      var edgeColor = 0xff00ff; // Transparency\n\n      var alpha = 1;\n      var isTransparent = false; // Self-illumination:\n\n      var luminance = 0;\n      var finishType = FINISH_TYPE_DEFAULT;\n      var edgeMaterial = null;\n      var name = lineParser.getToken();\n\n      if (!name) {\n        throw new Error('LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.');\n      } // Parse tag tokens and their parameters\n\n\n      var token = null;\n\n      while (true) {\n        token = lineParser.getToken();\n\n        if (!token) {\n          break;\n        }\n\n        switch (token.toUpperCase()) {\n          case 'CODE':\n            code = lineParser.getToken();\n            break;\n\n          case 'VALUE':\n            color = lineParser.getToken();\n\n            if (color.startsWith('0x')) {\n              color = '#' + color.substring(2);\n            } else if (!color.startsWith('#')) {\n              throw new Error('LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.');\n            }\n\n            break;\n\n          case 'EDGE':\n            edgeColor = lineParser.getToken();\n\n            if (edgeColor.startsWith('0x')) {\n              edgeColor = '#' + edgeColor.substring(2);\n            } else if (!edgeColor.startsWith('#')) {\n              // Try to see if edge color is a color code\n              edgeMaterial = this.getMaterial(edgeColor);\n\n              if (!edgeMaterial) {\n                throw new Error('LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.');\n              } // Get the edge material for this triangle material\n\n\n              edgeMaterial = edgeMaterial.userData.edgeMaterial;\n            }\n\n            break;\n\n          case 'ALPHA':\n            alpha = parseInt(lineParser.getToken());\n\n            if (isNaN(alpha)) {\n              throw new Error('LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.');\n            }\n\n            alpha = Math.max(0, Math.min(1, alpha / 255));\n\n            if (alpha < 1) {\n              isTransparent = true;\n            }\n\n            break;\n\n          case 'LUMINANCE':\n            luminance = parseInt(lineParser.getToken());\n\n            if (isNaN(luminance)) {\n              throw new Error('LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.');\n            }\n\n            luminance = Math.max(0, Math.min(1, luminance / 255));\n            break;\n\n          case 'CHROME':\n            finishType = FINISH_TYPE_CHROME;\n            break;\n\n          case 'PEARLESCENT':\n            finishType = FINISH_TYPE_PEARLESCENT;\n            break;\n\n          case 'RUBBER':\n            finishType = FINISH_TYPE_RUBBER;\n            break;\n\n          case 'MATTE_METALLIC':\n            finishType = FINISH_TYPE_MATTE_METALLIC;\n            break;\n\n          case 'METAL':\n            finishType = FINISH_TYPE_METAL;\n            break;\n\n          case 'MATERIAL':\n            // Not implemented\n            lineParser.setToEnd();\n            break;\n\n          default:\n            throw new Error('LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.');\n        }\n      }\n\n      var material = null;\n\n      switch (finishType) {\n        case FINISH_TYPE_DEFAULT:\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.3,\n            metalness: 0\n          });\n          break;\n\n        case FINISH_TYPE_PEARLESCENT:\n          // Try to imitate pearlescency by making the surface glossy\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.3,\n            metalness: 0.25\n          });\n          break;\n\n        case FINISH_TYPE_CHROME:\n          // Mirror finish surface\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0,\n            metalness: 1\n          });\n          break;\n\n        case FINISH_TYPE_RUBBER:\n          // Rubber finish\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.9,\n            metalness: 0\n          });\n          break;\n\n        case FINISH_TYPE_MATTE_METALLIC:\n          // Brushed metal finish\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.8,\n            metalness: 0.4\n          });\n          break;\n\n        case FINISH_TYPE_METAL:\n          // Average metal finish\n          material = new MeshStandardMaterial({\n            color: color,\n            roughness: 0.2,\n            metalness: 0.85\n          });\n          break;\n      }\n\n      material.transparent = isTransparent;\n      material.premultipliedAlpha = true;\n      material.opacity = alpha;\n      material.depthWrite = !isTransparent;\n      material.polygonOffset = true;\n      material.polygonOffsetFactor = 1;\n\n      if (luminance !== 0) {\n        material.emissive.set(material.color).multiplyScalar(luminance);\n      }\n\n      if (!edgeMaterial) {\n        // This is the material used for edges\n        edgeMaterial = new LineBasicMaterial({\n          color: edgeColor,\n          transparent: isTransparent,\n          opacity: alpha,\n          depthWrite: !isTransparent\n        });\n        edgeMaterial.userData.code = code;\n        edgeMaterial.name = name + ' - Edge'; // This is the material used for conditional edges\n\n        edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n          fog: true,\n          transparent: isTransparent,\n          depthWrite: !isTransparent,\n          color: edgeColor,\n          opacity: alpha\n        });\n      }\n\n      material.userData.code = code;\n      material.name = name;\n      material.userData.edgeMaterial = edgeMaterial;\n      this.addMaterial(material);\n      return material;\n    }\n  }, {\n    key: \"computeConstructionSteps\",\n    value: function computeConstructionSteps(model) {\n      // Sets userdata.constructionStep number in Group objects and userData.numConstructionSteps number in the root Group object.\n      var stepNumber = 0;\n      model.traverse(function (c) {\n        if (c.isGroup) {\n          if (c.userData.startingConstructionStep) {\n            stepNumber++;\n          }\n\n          c.userData.constructionStep = stepNumber;\n        }\n      });\n      model.userData.numConstructionSteps = stepNumber + 1;\n    }\n  }]);\n\n  return LDrawLoader;\n}(Loader);\n\nexport { LDrawLoader };","map":null,"metadata":{},"sourceType":"module"}