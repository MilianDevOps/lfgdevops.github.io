{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport * as React from 'react';\nimport { PointerLockControls as PointerLockControls$1 } from 'three-stdlib';\nconst PointerLockControls = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    selector,\n    onChange,\n    onLock,\n    onUnlock,\n    enabled = true,\n    ...props\n  } = _ref;\n  const {\n    camera,\n    ...rest\n  } = props;\n  const gl = useThree(_ref2 => {\n    let {\n      gl\n    } = _ref2;\n    return gl;\n  });\n  const defaultCamera = useThree(state => state.camera);\n  const invalidate = useThree(state => state.invalidate);\n  const raycaster = useThree(state => state.raycaster);\n  const events = useThree(state => state.events);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = gl.domElement || (typeof events.connected !== 'boolean' ? events.connected : gl.domElement);\n  const [controls] = React.useState(() => new PointerLockControls$1(explCamera));\n  React.useEffect(() => {\n    if (enabled) {\n      const callback = e => {\n        invalidate();\n        if (onChange) onChange(e);\n      };\n\n      controls.connect(explDomElement);\n      controls.addEventListener('change', callback);\n      if (onLock) controls.addEventListener('lock', onLock);\n      if (onUnlock) controls.addEventListener('unlock', onUnlock); // Force events to be centered while PLC is active\n\n      const oldComputeOffsets = raycaster.computeOffsets;\n\n      raycaster.computeOffsets = e => ({\n        offsetX: e.target.width / 2,\n        offsetY: e.target.height / 2\n      }); // Enforce previous interaction\n\n\n      const handler = () => controls.lock();\n\n      const elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];\n      elements.forEach(element => element && element.addEventListener('click', handler));\n      return () => {\n        controls.disconnect();\n        controls.removeEventListener('change', callback);\n        if (onLock) controls.addEventListener('lock', onLock);\n        if (onUnlock) controls.addEventListener('unlock', onUnlock);\n        elements.forEach(element => element ? element.removeEventListener('click', handler) : undefined);\n        raycaster.computeOffsets = oldComputeOffsets;\n      };\n    }\n  }, [enabled, onChange, onLock, onUnlock, controls, invalidate, selector]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, rest));\n});\nexport { PointerLockControls };","map":null,"metadata":{},"sourceType":"module"}