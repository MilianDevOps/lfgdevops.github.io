{"ast":null,"code":"import _slicedToArray from\"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _require=require(\"react\"),useEffect=_require.useEffect,useState=_require.useState;// Hook\nexport default function useKeyPress(targetKey){// State for keeping track of whether key is pressed\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),keyPressed=_useState2[0],setKeyPressed=_useState2[1];// If pressed key is our target key then set to true\nfunction downHandler(_ref){var key=_ref.key;if(key===targetKey){setKeyPressed(true);}}// If released key is our target key then set to false\nvar upHandler=function upHandler(_ref2){var key=_ref2.key;if(key===targetKey){setKeyPressed(false);}};// Add event listeners\nuseEffect(function(){window.addEventListener(\"keydown\",downHandler);window.addEventListener(\"keyup\",upHandler);// Remove event listeners on cleanup\nreturn function(){window.removeEventListener(\"keydown\",downHandler);window.removeEventListener(\"keyup\",upHandler);};},[]);// Empty array ensures that effect is only run on mount and unmount\nreturn keyPressed;}","map":null,"metadata":{},"sourceType":"module"}