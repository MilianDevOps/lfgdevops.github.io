{"ast":null,"code":"import * as MathUtils from '../math/MathUtils.js';\nimport { StaticDrawUsage } from '../constants.js';\n\nclass InterleavedBuffer {\n  constructor(array, stride) {\n    this.array = array;\n    this.stride = stride;\n    this.count = array !== undefined ? array.length / stride : 0;\n    this.usage = StaticDrawUsage;\n    this.updateRange = {\n      offset: 0,\n      count: -1\n    };\n    this.version = 0;\n    this.uuid = MathUtils.generateUUID();\n  }\n\n  onUploadCallback() {}\n\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  setUsage(value) {\n    this.usage = value;\n    return this;\n  }\n\n  copy(source) {\n    this.array = new source.array.constructor(source.array);\n    this.count = source.count;\n    this.stride = source.stride;\n    this.usage = source.usage;\n    return this;\n  }\n\n  copyAt(index1, attribute, index2) {\n    index1 *= this.stride;\n    index2 *= attribute.stride;\n\n    for (let i = 0, l = this.stride; i < l; i++) {\n      this.array[index1 + i] = attribute.array[index2 + i];\n    }\n\n    return this;\n  }\n\n  set(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.array.set(value, offset);\n    return this;\n  }\n\n  clone(data) {\n    if (data.arrayBuffers === undefined) {\n      data.arrayBuffers = {};\n    }\n\n    if (this.array.buffer._uuid === undefined) {\n      this.array.buffer._uuid = MathUtils.generateUUID();\n    }\n\n    if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n    }\n\n    const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n    const ib = new this.constructor(array, this.stride);\n    ib.setUsage(this.usage);\n    return ib;\n  }\n\n  onUpload(callback) {\n    this.onUploadCallback = callback;\n    return this;\n  }\n\n  toJSON(data) {\n    if (data.arrayBuffers === undefined) {\n      data.arrayBuffers = {};\n    } // generate UUID for array buffer if necessary\n\n\n    if (this.array.buffer._uuid === undefined) {\n      this.array.buffer._uuid = MathUtils.generateUUID();\n    }\n\n    if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n      data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n    } //\n\n\n    return {\n      uuid: this.uuid,\n      buffer: this.array.buffer._uuid,\n      type: this.array.constructor.name,\n      stride: this.stride\n    };\n  }\n\n}\n\nInterleavedBuffer.prototype.isInterleavedBuffer = true;\nexport { InterleavedBuffer };","map":null,"metadata":{},"sourceType":"module"}