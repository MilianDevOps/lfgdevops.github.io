{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport ContextNode from '../core/ContextNode.js';\nimport VarNode from '../core/VarNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport { PhysicalLightingModel } from '../functions/BSDFs.js';\nimport { Vector3 } from 'three';\n\nvar LightContextNode = /*#__PURE__*/function (_ContextNode) {\n  _inherits(LightContextNode, _ContextNode);\n\n  var _super = _createSuper(LightContextNode);\n\n  function LightContextNode(node) {\n    _classCallCheck(this, LightContextNode);\n\n    return _super.call(this, node);\n  }\n\n  _createClass(LightContextNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType() {\n      return 'vec3';\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var material = builder.material;\n      var lightingModel = null;\n\n      if (material.isMeshStandardMaterial === true) {\n        lightingModel = PhysicalLightingModel;\n      }\n\n      var directDiffuse = new VarNode(new UniformNode(new Vector3()), 'DirectDiffuse', 'vec3');\n      var directSpecular = new VarNode(new UniformNode(new Vector3()), 'DirectSpecular', 'vec3');\n      this.context.directDiffuse = directDiffuse;\n      this.context.directSpecular = directSpecular;\n\n      if (lightingModel !== null) {\n        this.context.lightingModel = lightingModel;\n      } // add code\n\n\n      var type = this.getNodeType(builder);\n\n      _get(_getPrototypeOf(LightContextNode.prototype), \"generate\", this).call(this, builder, type);\n\n      var totalLight = new OperatorNode('+', directDiffuse, directSpecular);\n      return totalLight.build(builder, type);\n    }\n  }]);\n\n  return LightContextNode;\n}(ContextNode);\n\nexport default LightContextNode;","map":null,"metadata":{},"sourceType":"module"}