{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nvar XRHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRHandModel, _Object3D);\n\n  var _super = _createSuper(XRHandModel);\n\n  function XRHandModel(controller) {\n    var _this;\n\n    _classCallCheck(this, XRHandModel);\n\n    _this = _super.call(this);\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    return _this;\n  }\n\n  _createClass(XRHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }]);\n\n  return XRHandModel;\n}(Object3D);\n\nvar XRHandModelFactory = /*#__PURE__*/function () {\n  function XRHandModelFactory() {\n    _classCallCheck(this, XRHandModelFactory);\n\n    this.path = null;\n  }\n\n  _createClass(XRHandModelFactory, [{\n    key: \"setPath\",\n    value: function setPath(path) {\n      this.path = path;\n      return this;\n    }\n  }, {\n    key: \"createHandModel\",\n    value: function createHandModel(controller, profile) {\n      var _this2 = this;\n\n      var handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'mesh') {\n            handModel.motionController = new XRHandMeshModel(handModel, controller, _this2.path, xrInputSource.handedness);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', function () {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  }]);\n\n  return XRHandModelFactory;\n}();\n\nexport { XRHandModelFactory };","map":null,"metadata":{},"sourceType":"module"}