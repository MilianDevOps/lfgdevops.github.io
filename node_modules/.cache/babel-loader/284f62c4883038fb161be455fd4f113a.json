{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { UniformsUtils, ShaderMaterial, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SavePass = /*#__PURE__*/function (_Pass) {\n  _inherits(SavePass, _Pass);\n\n  var _super = _createSuper(SavePass);\n\n  function SavePass(renderTarget) {\n    var _this;\n\n    _classCallCheck(this, SavePass);\n\n    _this = _super.call(this);\n    if (CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\n    var shader = CopyShader;\n    _this.textureID = 'tDiffuse';\n    _this.uniforms = UniformsUtils.clone(shader.uniforms);\n    _this.material = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    _this.renderTarget = renderTarget;\n\n    if (_this.renderTarget === undefined) {\n      _this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      _this.renderTarget.texture.name = 'SavePass.rt';\n    }\n\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(_this.material);\n    return _this;\n  }\n\n  _createClass(SavePass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer\n    /*, deltaTime, maskActive */\n    ) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer.texture;\n      }\n\n      renderer.setRenderTarget(this.renderTarget);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }]);\n\n  return SavePass;\n}(Pass);\n\nexport { SavePass };","map":null,"metadata":{},"sourceType":"module"}