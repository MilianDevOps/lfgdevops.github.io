{"ast":null,"code":"var _jsxFileName = \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/src/components/RoomScene/GLBModelViewer.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GLBModelViewer(_ref) {\n  _s();\n\n  let {\n    glbUrl,\n    size,\n    localScale,\n    id,\n    clearColor,\n    isWireframe,\n    hasShadow\n  } = _ref;\n\n  function setupModel(data) {\n    const model = data.scene.children[0];\n    return model;\n  }\n\n  async function runModel() {\n    var scene = new THREE.Scene(); // Load Camera Perspektive\n\n    var camera = new THREE.PerspectiveCamera(25, 400 / 400, 1, 5000);\n    camera.position.set(0.5, 2, 25); // Load a Renderer\n\n    var renderer = new THREE.WebGLRenderer({\n      alpha: true\n    }); // renderer.setClearColor(clearColor ? clearColor : 0x000000);\n\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(size, size);\n    var container = document.getElementById(id);\n    container.appendChild(renderer.domElement); // Load the Orbitcontroller\n    // var controls = new OrbitControls(camera, renderer.domElement);\n    // scene.add(new THREE.AxesHelper(500));\n    // Load Light\n\n    var hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n    scene.add(hemiLight);\n    renderer.toneMapping = THREE.ReinhardToneMapping;\n    renderer.toneMappingExposure = 2.3;\n    renderer.shadowMap.enabled = true; // var ambientLight = new THREE.AmbientLight(0xcccccc);\n    // scene.add(ambientLight);\n    // var directionalLight = new THREE.DirectionalLight(0xffffff);\n    // directionalLight.position.set(0, 1, 1).normalize();\n    // scene.add(directionalLight);\n\n    let spotlight = new THREE.SpotLight(0xffa95c, 4);\n    spotlight.castShadow = true;\n    spotlight.shadow.bias = -0.0001;\n    spotlight.shadow.mapSize.width = 1024 * 4;\n    spotlight.shadow.mapSize.height = 1024 * 4;\n    scene.add(spotlight);\n    var loader = new GLTFLoader();\n    loader.load(glbUrl, function (gltf) {\n      var object = gltf.scene;\n      gltf.scene.scale.set(localScale, localScale, localScale);\n      gltf.scene.position.x = 0; //Position (x = right+ left-)\n\n      gltf.scene.position.y = 0; //Position (y = up+, down-)\n\n      gltf.scene.position.z = 0; //Position (z = front +, back-)\n\n      gltf.scene.rotation.y = 3.14159265358979323846264338327950288419;\n      gltf.scene.traverse(n => {\n        if (n.isMesh) {\n          if (hasShadow) {\n            n.castShadow = true;\n            n.receiveShadow = true;\n          }\n\n          if (isWireframe) {\n            n.material.wireframe = true;\n            n.material.color.setHex(0xffffff);\n          }\n\n          if (n.material.map) {\n            n.material.map.anisotropy = 16;\n          }\n        }\n      }); // var geo = new THREE.EdgesGeometry(gltf.scene); // or WireframeGeometry( geometry )\n      // var mat = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 2 });\n      // var wireframe = new THREE.LineSegments(geo, mat);\n      // scene.add(wireframe);\n\n      scene.add(gltf.scene);\n    });\n\n    function animate() {\n      render();\n      scene.rotation.y += 0.005;\n      spotlight.position.set(camera.position.x + 10, camera.position.y + 10, camera.position.z + 10);\n      requestAnimationFrame(animate);\n    }\n\n    function render() {\n      renderer.render(scene, camera);\n    }\n\n    render();\n    animate();\n  }\n\n  useEffect(() => {\n    runModel();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 10\n  }, this);\n}\n\n_s(GLBModelViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = GLBModelViewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"GLBModelViewer\");","map":{"version":3,"sources":["/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/src/components/RoomScene/GLBModelViewer.js"],"names":["useEffect","THREE","GLTFLoader","OrbitControls","GLBModelViewer","glbUrl","size","localScale","id","clearColor","isWireframe","hasShadow","setupModel","data","model","scene","children","runModel","Scene","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","container","document","getElementById","appendChild","domElement","hemiLight","HemisphereLight","add","toneMapping","ReinhardToneMapping","toneMappingExposure","shadowMap","enabled","spotlight","SpotLight","castShadow","shadow","bias","mapSize","width","height","loader","load","gltf","object","scale","x","y","z","rotation","traverse","n","isMesh","receiveShadow","material","wireframe","color","setHex","map","anisotropy","animate","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport default function GLBModelViewer({\n  glbUrl,\n  size,\n  localScale,\n  id,\n  clearColor,\n  isWireframe,\n  hasShadow,\n}) {\n  function setupModel(data) {\n    const model = data.scene.children[0];\n\n    return model;\n  }\n\n  async function runModel() {\n    var scene = new THREE.Scene();\n\n    // Load Camera Perspektive\n    var camera = new THREE.PerspectiveCamera(25, 400 / 400, 1, 5000);\n    camera.position.set(0.5, 2, 25);\n\n    // Load a Renderer\n    var renderer = new THREE.WebGLRenderer({ alpha: true });\n    // renderer.setClearColor(clearColor ? clearColor : 0x000000);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(size, size);\n    var container = document.getElementById(id);\n\n    container.appendChild(renderer.domElement);\n\n    // Load the Orbitcontroller\n    // var controls = new OrbitControls(camera, renderer.domElement);\n    // scene.add(new THREE.AxesHelper(500));\n    // Load Light\n    var hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n    scene.add(hemiLight);\n    renderer.toneMapping = THREE.ReinhardToneMapping;\n    renderer.toneMappingExposure = 2.3;\n    renderer.shadowMap.enabled = true;\n    // var ambientLight = new THREE.AmbientLight(0xcccccc);\n    // scene.add(ambientLight);\n\n    // var directionalLight = new THREE.DirectionalLight(0xffffff);\n    // directionalLight.position.set(0, 1, 1).normalize();\n    // scene.add(directionalLight);\n    let spotlight = new THREE.SpotLight(0xffa95c, 4);\n    spotlight.castShadow = true;\n    spotlight.shadow.bias = -0.0001;\n    spotlight.shadow.mapSize.width = 1024 * 4;\n    spotlight.shadow.mapSize.height = 1024 * 4;\n\n    scene.add(spotlight);\n    var loader = new GLTFLoader();\n    loader.load(glbUrl, function (gltf) {\n      var object = gltf.scene;\n\n      gltf.scene.scale.set(localScale, localScale, localScale);\n      gltf.scene.position.x = 0; //Position (x = right+ left-)\n      gltf.scene.position.y = 0; //Position (y = up+, down-)\n      gltf.scene.position.z = 0; //Position (z = front +, back-)\n      gltf.scene.rotation.y = 3.14159265358979323846264338327950288419;\n      gltf.scene.traverse((n) => {\n        if (n.isMesh) {\n          if (hasShadow) {\n            n.castShadow = true;\n            n.receiveShadow = true;\n          }\n          if (isWireframe) {\n            n.material.wireframe = true;\n            n.material.color.setHex(0xffffff);\n          }\n          if (n.material.map) {\n            n.material.map.anisotropy = 16;\n          }\n        }\n      });\n      // var geo = new THREE.EdgesGeometry(gltf.scene); // or WireframeGeometry( geometry )\n\n      // var mat = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 2 });\n\n      // var wireframe = new THREE.LineSegments(geo, mat);\n\n      // scene.add(wireframe);\n      scene.add(gltf.scene);\n    });\n\n    function animate() {\n      render();\n      scene.rotation.y += 0.005;\n      spotlight.position.set(\n        camera.position.x + 10,\n        camera.position.y + 10,\n        camera.position.z + 10\n      );\n      requestAnimationFrame(animate);\n    }\n\n    function render() {\n      renderer.render(scene, camera);\n    }\n\n    render();\n    animate();\n  }\n\n  useEffect(() => {\n    runModel();\n  }, []);\n  return <div />;\n}\n"]},"metadata":{},"sourceType":"module"}