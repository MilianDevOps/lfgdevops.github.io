{"ast":null,"code":"import _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _toConsumableArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"limit\", \"lineWidth\", \"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { useFrame, extend } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineSegmentsGeometry } from 'three-stdlib';\nvar context = /*#__PURE__*/React.createContext(null);\n\nvar arrColor = function arrColor(color) {\n  return color instanceof THREE.Color ? color.toArray() : color;\n};\n\nvar arrPos = function arrPos(pos) {\n  return pos instanceof THREE.Vector3 ? pos.toArray() : pos;\n};\n\nvar Segments = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  var _props$limit = props.limit,\n      limit = _props$limit === void 0 ? 1000 : _props$limit,\n      _props$lineWidth = props.lineWidth,\n      lineWidth = _props$lineWidth === void 0 ? 1.0 : _props$lineWidth,\n      children = props.children,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      segments = _React$useState2[0],\n      setSegments = _React$useState2[1];\n\n  var _React$useState3 = React.useState(function () {\n    return new Line2();\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      line = _React$useState4[0];\n\n  var _React$useState5 = React.useState(function () {\n    return new LineMaterial();\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      material = _React$useState6[0];\n\n  var _React$useState7 = React.useState(function () {\n    return new LineSegmentsGeometry();\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 1),\n      geometry = _React$useState8[0];\n\n  var _React$useState9 = React.useState(function () {\n    return new THREE.Vector2(512, 512);\n  }),\n      _React$useState10 = _slicedToArray(_React$useState9, 1),\n      resolution = _React$useState10[0];\n\n  var _React$useState11 = React.useState(function () {\n    return Array(limit * 6).fill(0);\n  }),\n      _React$useState12 = _slicedToArray(_React$useState11, 1),\n      positions = _React$useState12[0];\n\n  var _React$useState13 = React.useState(function () {\n    return Array(limit * 6).fill(0);\n  }),\n      _React$useState14 = _slicedToArray(_React$useState13, 1),\n      colors = _React$useState14[0];\n\n  var api = React.useMemo(function () {\n    return {\n      subscribe: function subscribe(ref) {\n        setSegments(function (segments) {\n          return [].concat(_toConsumableArray(segments), [ref]);\n        });\n        return function () {\n          return setSegments(function (segments) {\n            return segments.filter(function (item) {\n              return item.current !== ref.current;\n            });\n          });\n        };\n      }\n    };\n  }, []);\n  useFrame(function () {\n    for (var i = 0; i < limit; i++) {\n      var _segments$i;\n\n      var segment = (_segments$i = segments[i]) == null ? void 0 : _segments$i.current;\n      var segmentStart = segment ? arrPos(segment.start) : [0, 0, 0];\n      var segmentEnd = segment ? arrPos(segment.end) : [0, 0, 0];\n      var segmentColor = segment ? arrColor(segment.color) : [1, 1, 1]; //console.log(segmentStart, segmentEnd, segmentColor)\n\n      for (var j = 0; j < 3; j++) {\n        positions[i * 6 + j] = segmentStart[j];\n        positions[i * 6 + j + 3] = segmentEnd[j];\n        colors[i * 6 + j] = segmentColor[j];\n        colors[i * 6 + j + 3] = segmentColor[j];\n      }\n    }\n\n    geometry.setColors(colors);\n    geometry.setPositions(positions);\n    line.computeLineDistances();\n  });\n  return /*#__PURE__*/React.createElement(\"primitive\", {\n    object: line,\n    ref: forwardedRef\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: geometry,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    attach: \"material\",\n    vertexColors: true,\n    resolution: resolution,\n    linewidth: lineWidth\n  }, rest)), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\n\nvar SegmentObject = /*#__PURE__*/_createClass(function SegmentObject() {\n  _classCallCheck(this, SegmentObject);\n\n  this.color = new THREE.Color('white');\n  this.start = new THREE.Vector3(0, 0, 0);\n  this.end = new THREE.Vector3(0, 0, 0);\n});\n\nvar Segment = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  var api = React.useContext(context);\n  if (!api) throw 'Segment must used inside Segments component.';\n  var ref = React.useRef();\n  React.useMemo(function () {\n    return extend({\n      SegmentObject: SegmentObject\n    });\n  }, []);\n  React.useLayoutEffect(function () {\n    return api.subscribe(ref);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"segmentObject\", _extends({\n    ref: mergeRefs([ref, forwardedRef])\n  }, props));\n});\nexport { Segment, Segments };","map":null,"metadata":{},"sourceType":"module"}