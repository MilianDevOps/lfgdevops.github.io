{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { UniformsUtils, WebGLRenderTarget, LinearFilter, NearestFilter, RGBAFormat, ShaderMaterial, MeshBasicMaterial } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\nvar AfterimagePass = /*#__PURE__*/function (_Pass) {\n  _inherits(AfterimagePass, _Pass);\n\n  var _super = _createSuper(AfterimagePass);\n\n  function AfterimagePass() {\n    var _this;\n\n    var damp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.96;\n    var shader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AfterimageShader;\n\n    _classCallCheck(this, AfterimagePass);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"shader\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"uniforms\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"textureComp\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"textureOld\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"shaderMaterial\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"compFsQuad\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"copyFsQuad\", void 0);\n\n    _this.shader = shader;\n    _this.uniforms = UniformsUtils.clone(shader.uniforms);\n    _this.uniforms['damp'].value = damp;\n    _this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    _this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    _this.shaderMaterial = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: _this.shader.vertexShader,\n      fragmentShader: _this.shader.fragmentShader\n    });\n    _this.compFsQuad = new FullScreenQuad(_this.shaderMaterial);\n    var material = new MeshBasicMaterial();\n    _this.copyFsQuad = new FullScreenQuad(material);\n    return _this;\n  }\n\n  _createClass(AfterimagePass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      this.uniforms['tOld'].value = this.textureOld.texture;\n      this.uniforms['tNew'].value = readBuffer.texture;\n      renderer.setRenderTarget(this.textureComp);\n      this.compFsQuad.render(renderer);\n      this.copyFsQuad.material.map = this.textureComp.texture;\n\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.copyFsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        this.copyFsQuad.render(renderer);\n      } // Swap buffers.\n\n\n      var temp = this.textureOld;\n      this.textureOld = this.textureComp;\n      this.textureComp = temp; // Now textureOld contains the latest image, ready for the next frame.\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.textureComp.setSize(width, height);\n      this.textureOld.setSize(width, height);\n    }\n  }]);\n\n  return AfterimagePass;\n}(Pass);\n\nexport { AfterimagePass };","map":null,"metadata":{},"sourceType":"module"}