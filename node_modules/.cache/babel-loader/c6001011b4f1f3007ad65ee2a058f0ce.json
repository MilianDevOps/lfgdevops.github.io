{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ZeroCurvatureEnding } from '../../constants.js';\nimport { Interpolant } from '../Interpolant.js';\nimport { WrapAroundEnding, ZeroSlopeEnding } from '../../constants.js';\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n */\n\nvar CubicInterpolant = /*#__PURE__*/function (_Interpolant) {\n  _inherits(CubicInterpolant, _Interpolant);\n\n  var _super = _createSuper(CubicInterpolant);\n\n  function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    var _this;\n\n    _classCallCheck(this, CubicInterpolant);\n\n    _this = _super.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n    _this._weightPrev = -0;\n    _this._offsetPrev = -0;\n    _this._weightNext = -0;\n    _this._offsetNext = -0;\n    _this.DefaultSettings_ = {\n      endingStart: ZeroCurvatureEnding,\n      endingEnd: ZeroCurvatureEnding\n    };\n    return _this;\n  }\n\n  _createClass(CubicInterpolant, [{\n    key: \"intervalChanged_\",\n    value: function intervalChanged_(i1, t0, t1) {\n      var pp = this.parameterPositions;\n      var iPrev = i1 - 2,\n          iNext = i1 + 1,\n          tPrev = pp[iPrev],\n          tNext = pp[iNext];\n\n      if (tPrev === undefined) {\n        switch (this.getSettings_().endingStart) {\n          case ZeroSlopeEnding:\n            // f'(t0) = 0\n            iPrev = i1;\n            tPrev = 2 * t0 - t1;\n            break;\n\n          case WrapAroundEnding:\n            // use the other end of the curve\n            iPrev = pp.length - 2;\n            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n            break;\n\n          default:\n            // ZeroCurvatureEnding\n            // f''(t0) = 0 a.k.a. Natural Spline\n            iPrev = i1;\n            tPrev = t1;\n        }\n      }\n\n      if (tNext === undefined) {\n        switch (this.getSettings_().endingEnd) {\n          case ZeroSlopeEnding:\n            // f'(tN) = 0\n            iNext = i1;\n            tNext = 2 * t1 - t0;\n            break;\n\n          case WrapAroundEnding:\n            // use the other end of the curve\n            iNext = 1;\n            tNext = t1 + pp[1] - pp[0];\n            break;\n\n          default:\n            // ZeroCurvatureEnding\n            // f''(tN) = 0, a.k.a. Natural Spline\n            iNext = i1 - 1;\n            tNext = t0;\n        }\n      }\n\n      var halfDt = (t1 - t0) * 0.5,\n          stride = this.valueSize;\n      this._weightPrev = halfDt / (t0 - tPrev);\n      this._weightNext = halfDt / (tNext - t1);\n      this._offsetPrev = iPrev * stride;\n      this._offsetNext = iNext * stride;\n    }\n  }, {\n    key: \"interpolate_\",\n    value: function interpolate_(i1, t0, t, t1) {\n      var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          o1 = i1 * stride,\n          o0 = o1 - stride,\n          oP = this._offsetPrev,\n          oN = this._offsetNext,\n          wP = this._weightPrev,\n          wN = this._weightNext,\n          p = (t - t0) / (t1 - t0),\n          pp = p * p,\n          ppp = pp * p; // evaluate polynomials\n\n      var sP = -wP * ppp + 2 * wP * pp - wP * p;\n      var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n      var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n      var sN = wN * ppp - wN * pp; // combine data linearly\n\n      for (var i = 0; i !== stride; ++i) {\n        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n      }\n\n      return result;\n    }\n  }]);\n\n  return CubicInterpolant;\n}(Interpolant);\n\nexport { CubicInterpolant };","map":null,"metadata":{},"sourceType":"module"}