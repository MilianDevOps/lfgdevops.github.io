{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, LoadingManager, Group } from 'three';\nimport { ColladaLoader } from './ColladaLoader.js';\nimport { unzipSync } from 'fflate';\n\nvar KMZLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(KMZLoader, _Loader);\n\n  var _super = _createSuper(KMZLoader);\n\n  function KMZLoader(manager) {\n    _classCallCheck(this, KMZLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(KMZLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function findFile(url) {\n        for (var path in zip) {\n          if (path.substr(-url.length) === url) {\n            return zip[path];\n          }\n        }\n      }\n\n      var manager = new LoadingManager();\n      manager.setURLModifier(function (url) {\n        var image = findFile(url);\n\n        if (image) {\n          console.log('Loading', url);\n          var blob = new Blob([image.buffer], {\n            type: 'application/octet-stream'\n          });\n          return URL.createObjectURL(blob);\n        }\n\n        return url;\n      }); //\n\n      var zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n\n      if (zip['doc.kml']) {\n        var xml = new DOMParser().parseFromString(fflate.strFromU8(zip['doc.kml']), 'application/xml'); // eslint-disable-line no-undef\n\n        var model = xml.querySelector('Placemark Model Link href');\n\n        if (model) {\n          var loader = new ColladaLoader(manager);\n          return loader.parse(fflate.strFromU8(zip[model.textContent])); // eslint-disable-line no-undef\n        }\n      } else {\n        console.warn('KMZLoader: Missing doc.kml file.');\n\n        for (var path in zip) {\n          var extension = path.split('.').pop().toLowerCase();\n\n          if (extension === 'dae') {\n            var _loader = new ColladaLoader(manager);\n\n            return _loader.parse(fflate.strFromU8(zip[path])); // eslint-disable-line no-undef\n          }\n        }\n      }\n\n      console.error(\"KMZLoader: Couldn't find .dae file.\");\n      return {\n        scene: new Group()\n      };\n    }\n  }]);\n\n  return KMZLoader;\n}(Loader);\n\nexport { KMZLoader };","map":null,"metadata":{},"sourceType":"module"}