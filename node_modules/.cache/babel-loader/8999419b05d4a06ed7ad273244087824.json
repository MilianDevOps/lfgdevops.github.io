{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, CanvasTexture, NearestFilter, FileLoader } from 'three';\n\nvar LottieLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LottieLoader, _Loader);\n\n  var _super = _createSuper(LottieLoader);\n\n  function LottieLoader() {\n    _classCallCheck(this, LottieLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LottieLoader, [{\n    key: \"setQuality\",\n    value: function setQuality(value) {\n      this._quality = value;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var quality = this._quality || 1;\n      var texture = new CanvasTexture();\n      texture.minFilter = NearestFilter;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        var data = JSON.parse(text); // bodymoving uses container.offetWidth and offsetHeight\n        // to define width/height\n\n        var container = document.createElement('div');\n        container.style.width = data.w + 'px';\n        container.style.height = data.h + 'px';\n        document.body.appendChild(container);\n        var animation = bodymovin.loadAnimation({\n          container: container,\n          animType: 'canvas',\n          loop: true,\n          autoplay: true,\n          animationData: data,\n          rendererSettings: {\n            dpr: quality\n          }\n        });\n        texture.animation = animation;\n        texture.image = animation.container;\n        animation.addEventListener('enterFrame', function () {\n          texture.needsUpdate = true;\n        });\n        container.style.display = 'none';\n\n        if (onLoad !== undefined) {\n          onLoad(texture);\n        }\n      }, onProgress, onError);\n      return texture;\n    }\n  }]);\n\n  return LottieLoader;\n}(Loader);\n\nexport { LottieLoader };","map":null,"metadata":{},"sourceType":"module"}