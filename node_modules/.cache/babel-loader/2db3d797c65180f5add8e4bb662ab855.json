{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nvar FunctionNode = /*#__PURE__*/function (_CodeNode) {\n  _inherits(FunctionNode, _CodeNode);\n\n  var _super = _createSuper(FunctionNode);\n\n  function FunctionNode() {\n    var _this;\n\n    var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, FunctionNode);\n\n    _this = _super.call(this, code);\n    _this.keywords = {};\n    return _this;\n  }\n\n  _createClass(FunctionNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return this.getNodeFunction(builder).type;\n    }\n  }, {\n    key: \"getInputs\",\n    value: function getInputs(builder) {\n      return this.getNodeFunction(builder).inputs;\n    }\n  }, {\n    key: \"getNodeFunction\",\n    value: function getNodeFunction(builder) {\n      var nodeData = builder.getDataFromNode(this);\n      var nodeFunction = nodeData.nodeFunction;\n\n      if (nodeFunction === undefined) {\n        nodeFunction = builder.parser.parseFunction(this.code);\n        nodeData.nodeFunction = nodeFunction;\n      }\n\n      return nodeFunction;\n    }\n  }, {\n    key: \"call\",\n    value: function call() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new FunctionCallNode(this, parameters);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      _get(_getPrototypeOf(FunctionNode.prototype), \"generate\", this).call(this, builder);\n\n      var nodeFunction = this.getNodeFunction(builder);\n      var name = nodeFunction.name;\n      var type = nodeFunction.type;\n      var nodeCode = builder.getCodeFromNode(this, type);\n\n      if (name !== '') {\n        // use a custom property name\n        nodeCode.name = name;\n      }\n\n      var propertyName = builder.getPropertyName(nodeCode);\n      var code = this.getNodeFunction(builder).getCode(propertyName);\n      var keywords = this.keywords;\n      var keywordsProperties = Object.keys(keywords);\n\n      if (keywordsProperties.length > 0) {\n        var _iterator = _createForOfIteratorHelper(keywordsProperties),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var property = _step.value;\n            var propertyRegExp = new RegExp(\"\\\\b\".concat(property, \"\\\\b\"), 'g');\n            var nodeProperty = keywords[property].build(builder, 'property');\n            code = code.replace(propertyRegExp, nodeProperty);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      nodeCode.code = code;\n\n      if (output === 'property') {\n        return propertyName;\n      } else {\n        return builder.format(\"\".concat(propertyName, \"()\"), type, output);\n      }\n    }\n  }]);\n\n  return FunctionNode;\n}(CodeNode);\n\nexport default FunctionNode;","map":null,"metadata":{},"sourceType":"module"}