{"ast":null,"code":"import _toConsumableArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"range\", \"limit\"],\n    _excluded2 = [\"children\"],\n    _excluded3 = [\"children\", \"positions\", \"colors\", \"sizes\", \"stride\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { Position } from '../helpers/Position.js';\nvar i, positionRef;\nvar context = /*#__PURE__*/React.createContext(null);\nvar parentMatrix = new THREE.Matrix4();\nvar position = new THREE.Vector3();\nvar color = new THREE.Color();\n/**\n * Instance implementation, relies on react + context to update the attributes based on the children of this component\n */\n\nvar PointsInstances = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      range = _ref.range,\n      _ref$limit = _ref.limit,\n      limit = _ref$limit === void 0 ? 1000 : _ref$limit,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var parentRef = React.useRef(null);\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refs = _React$useState2[0],\n      setRefs = _React$useState2[1];\n\n  var _React$useState3 = React.useState(function () {\n    return [new Float32Array(limit * 3), Float32Array.from({\n      length: limit * 3\n    }, function () {\n      return 1;\n    }), Float32Array.from({\n      length: limit\n    }, function () {\n      return 1;\n    })];\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      _React$useState4$ = _slicedToArray(_React$useState4[0], 3),\n      positions = _React$useState4$[0],\n      colors = _React$useState4$[1],\n      sizes = _React$useState4$[2];\n\n  React.useLayoutEffect(function () {\n    parentRef.current.geometry.drawRange.count = Math.min(limit, range !== undefined ? range : limit, refs.length);\n  }, [refs, range]);\n  React.useEffect(function () {\n    // We might be a frame too late? ü§∑‚Äç‚ôÇÔ∏è\n    parentRef.current.geometry.attributes.position.needsUpdate = true;\n  });\n  useFrame(function () {\n    parentRef.current.updateMatrix();\n    parentRef.current.updateMatrixWorld();\n    parentMatrix.copy(parentRef.current.matrixWorld).invert();\n\n    for (i = 0; i < refs.length; i++) {\n      positionRef = refs[i].current;\n      positionRef.getWorldPosition(position).applyMatrix4(parentMatrix);\n\n      if (position.x !== positions[i * 3] || position.y !== positions[i * 3 + 1] || position.z !== positions[i * 3 + 2]) {\n        position.toArray(positions, i * 3);\n        parentRef.current.geometry.attributes.position.needsUpdate = true;\n        positionRef.matrixWorldNeedsUpdate = true;\n      }\n\n      if (!positionRef.color.equals(color.fromArray(colors, i * 3))) {\n        positionRef.color.toArray(colors, i * 3);\n        parentRef.current.geometry.attributes.color.needsUpdate = true;\n      }\n\n      if (positionRef.size !== sizes[i]) {\n        sizes.set([positionRef.size], i);\n        parentRef.current.geometry.attributes.size.needsUpdate = true;\n      }\n    }\n  });\n  var events = React.useMemo(function () {\n    var events = {};\n\n    for (i = 0; i < refs.length; i++) {\n      var _refs$i$current;\n\n      Object.assign(events, (_refs$i$current = refs[i].current) == null ? void 0 : _refs$i$current.__r3f.handlers);\n    }\n\n    return Object.keys(events).reduce(function (prev, key) {\n      return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, key, function (event) {\n        var _refs$event$index, _r3f, _r3f$handlers;\n\n        var object = (_refs$event$index = refs[event.index]) == null ? void 0 : _refs$event$index.current;\n        return object == null ? void 0 : (_r3f = object.__r3f) == null ? void 0 : (_r3f$handlers = _r3f.handlers) == null ? void 0 : _r3f$handlers[key](_objectSpread(_objectSpread({}, event), {}, {\n          object: object\n        }));\n      }));\n    }, {});\n  }, [children, refs]);\n  var api = React.useMemo(function () {\n    return {\n      subscribe: function subscribe(ref) {\n        setRefs(function (refs) {\n          return [].concat(_toConsumableArray(refs), [ref]);\n        });\n        return function () {\n          return setRefs(function (refs) {\n            return refs.filter(function (item) {\n              return item.current !== ref.current;\n            });\n          });\n        };\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"points\", _extends({\n    matrixAutoUpdate: false,\n    ref: mergeRefs([ref, parentRef])\n  }, events, props), /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    count: positions.length / 3,\n    array: positions,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    count: colors.length / 3,\n    array: colors,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    count: sizes.length,\n    array: sizes,\n    itemSize: 1,\n    usage: THREE.DynamicDrawUsage\n  })), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\nvar Point = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded2);\n\n  React.useMemo(function () {\n    return extend({\n      Position: Position\n    });\n  }, []);\n  var group = React.useRef();\n\n  var _React$useContext = React.useContext(context),\n      subscribe = _React$useContext.subscribe;\n\n  React.useLayoutEffect(function () {\n    return subscribe(group);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"position\", _extends({\n    ref: mergeRefs([ref, group])\n  }, props), children);\n});\n/**\n * Buffer implementation, relies on complete buffers of the correct number, leaves it to the user to update them\n */\n\nvar PointsBuffer = /*#__PURE__*/React.forwardRef(function (_ref3, forwardedRef) {\n  var children = _ref3.children,\n      positions = _ref3.positions,\n      colors = _ref3.colors,\n      sizes = _ref3.sizes,\n      _ref3$stride = _ref3.stride,\n      stride = _ref3$stride === void 0 ? 3 : _ref3$stride,\n      props = _objectWithoutProperties(_ref3, _excluded3);\n\n  var pointsRef = React.useRef(null);\n  useFrame(function () {\n    var attr = pointsRef.current.geometry.attributes;\n    attr.position.needsUpdate = true;\n\n    if (colors) {\n      attr.color.needsUpdate = true;\n    }\n\n    if (sizes) {\n      attr.size.needsUpdate = true;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"points\", _extends({\n    matrixAutoUpdate: false,\n    ref: mergeRefs([forwardedRef, pointsRef])\n  }, props), /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    count: positions.length / stride,\n    array: positions,\n    itemSize: stride,\n    usage: THREE.DynamicDrawUsage\n  }), colors && /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    count: colors.length / stride,\n    array: colors,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), sizes && /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    count: sizes.length / stride,\n    array: sizes,\n    itemSize: 1,\n    usage: THREE.DynamicDrawUsage\n  })), children);\n});\nvar Points = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  if (props.positions instanceof Float32Array) {\n    return /*#__PURE__*/React.createElement(PointsBuffer, _extends({}, props, {\n      ref: forwardedRef\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(PointsInstances, _extends({}, props, {\n    ref: forwardedRef\n  }));\n});\nexport { Point, Points, PointsBuffer };","map":null,"metadata":{},"sourceType":"module"}