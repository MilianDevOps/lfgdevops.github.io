{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, BufferGeometry, Float32BufferAttribute } from 'three';\n\nvar XYZLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(XYZLoader, _Loader);\n\n  var _super = _createSuper(XYZLoader);\n\n  function XYZLoader() {\n    _classCallCheck(this, XYZLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(XYZLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      var lines = text.split('\\n');\n      var vertices = [];\n      var colors = [];\n\n      var _iterator = _createForOfIteratorHelper(lines),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var line = _step.value;\n          line = line.trim();\n          if (line.charAt(0) === '#') continue; // skip comments\n\n          var lineValues = line.split(/\\s+/);\n\n          if (lineValues.length === 3) {\n            // XYZ\n            vertices.push(parseFloat(lineValues[0]));\n            vertices.push(parseFloat(lineValues[1]));\n            vertices.push(parseFloat(lineValues[2]));\n          }\n\n          if (lineValues.length === 6) {\n            // XYZRGB\n            vertices.push(parseFloat(lineValues[0]));\n            vertices.push(parseFloat(lineValues[1]));\n            vertices.push(parseFloat(lineValues[2]));\n            colors.push(parseFloat(lineValues[3]) / 255);\n            colors.push(parseFloat(lineValues[4]) / 255);\n            colors.push(parseFloat(lineValues[5]) / 255);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n      if (colors.length > 0) {\n        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      }\n\n      return geometry;\n    }\n  }]);\n\n  return XYZLoader;\n}(Loader);\n\nexport { XYZLoader };","map":null,"metadata":{},"sourceType":"module"}