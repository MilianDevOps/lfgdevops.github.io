{"ast":null,"code":"import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport * as MathUtils from '../math/MathUtils.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nconst _v0 = new Vector3();\n\nconst _v1 = new Vector3();\n\nconst _normal = new Vector3();\n\nconst _triangle = new Triangle();\n\nclass EdgesGeometry extends BufferGeometry {\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let thresholdAngle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super();\n    this.type = 'EdgesGeometry';\n    this.parameters = {\n      geometry: geometry,\n      thresholdAngle: thresholdAngle\n    };\n\n    if (geometry !== null) {\n      const precisionPoints = 4;\n      const precision = Math.pow(10, precisionPoints);\n      const thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);\n      const indexAttr = geometry.getIndex();\n      const positionAttr = geometry.getAttribute('position');\n      const indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n      const indexArr = [0, 0, 0];\n      const vertKeys = ['a', 'b', 'c'];\n      const hashes = new Array(3);\n      const edgeData = {};\n      const vertices = [];\n\n      for (let i = 0; i < indexCount; i += 3) {\n        if (indexAttr) {\n          indexArr[0] = indexAttr.getX(i);\n          indexArr[1] = indexAttr.getX(i + 1);\n          indexArr[2] = indexAttr.getX(i + 2);\n        } else {\n          indexArr[0] = i;\n          indexArr[1] = i + 1;\n          indexArr[2] = i + 2;\n        }\n\n        const {\n          a,\n          b,\n          c\n        } = _triangle;\n        a.fromBufferAttribute(positionAttr, indexArr[0]);\n        b.fromBufferAttribute(positionAttr, indexArr[1]);\n        c.fromBufferAttribute(positionAttr, indexArr[2]);\n\n        _triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n        hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n        hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n        hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n        if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n          continue;\n        } // iterate over every edge\n\n\n        for (let j = 0; j < 3; j++) {\n          // get the first and next vertex making up the edge\n          const jNext = (j + 1) % 3;\n          const vecHash0 = hashes[j];\n          const vecHash1 = hashes[jNext];\n          const v0 = _triangle[vertKeys[j]];\n          const v1 = _triangle[vertKeys[jNext]];\n          const hash = `${vecHash0}_${vecHash1}`;\n          const reverseHash = `${vecHash1}_${vecHash0}`;\n\n          if (reverseHash in edgeData && edgeData[reverseHash]) {\n            // if we found a sibling edge add it into the vertex array if\n            // it meets the angle threshold and delete the edge from the map.\n            if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n              vertices.push(v0.x, v0.y, v0.z);\n              vertices.push(v1.x, v1.y, v1.z);\n            }\n\n            edgeData[reverseHash] = null;\n          } else if (!(hash in edgeData)) {\n            // if we've already got an edge here then skip adding a new one\n            edgeData[hash] = {\n              index0: indexArr[j],\n              index1: indexArr[jNext],\n              normal: _normal.clone()\n            };\n          }\n        }\n      } // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n      for (const key in edgeData) {\n        if (edgeData[key]) {\n          const {\n            index0,\n            index1\n          } = edgeData[key];\n\n          _v0.fromBufferAttribute(positionAttr, index0);\n\n          _v1.fromBufferAttribute(positionAttr, index1);\n\n          vertices.push(_v0.x, _v0.y, _v0.z);\n          vertices.push(_v1.x, _v1.y, _v1.z);\n        }\n      }\n\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    }\n  }\n\n}\n\nexport { EdgesGeometry };","map":null,"metadata":{},"sourceType":"module"}