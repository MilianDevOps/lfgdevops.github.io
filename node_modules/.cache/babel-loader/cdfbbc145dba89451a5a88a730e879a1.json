{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { MapControls as MapControls$1 } from 'three-stdlib';\nconst MapControls = /*#__PURE__*/React.forwardRef(function () {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    enableDamping: true\n  };\n  let ref = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    camera,\n    onChange,\n    onStart,\n    onEnd,\n    ...rest\n  } = props;\n  const invalidate = useThree(_ref => {\n    let {\n      invalidate\n    } = _ref;\n    return invalidate;\n  });\n  const defaultCamera = useThree(_ref2 => {\n    let {\n      camera\n    } = _ref2;\n    return camera;\n  });\n  const domElement = useThree(_ref3 => {\n    let {\n      gl\n    } = _ref3;\n    return gl.domElement;\n  });\n  const explCamera = camera || defaultCamera;\n  const controls = React.useMemo(() => new MapControls$1(explCamera), [explCamera]);\n  React.useEffect(() => {\n    controls.connect(domElement);\n\n    const callback = e => {\n      invalidate();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onStart) controls.addEventListener('start', onStart);\n    if (onEnd) controls.addEventListener('end', onEnd);\n    return () => {\n      controls.dispose();\n      controls.removeEventListener('change', callback);\n      if (onStart) controls.removeEventListener('start', onStart);\n      if (onEnd) controls.removeEventListener('end', onEnd);\n    };\n  }, [onChange, onStart, onEnd, controls, invalidate, domElement]);\n  useFrame(() => controls.update());\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    dispose: undefined,\n    object: controls,\n    enableDamping: true\n  }, rest));\n});\nexport { MapControls };","map":null,"metadata":{},"sourceType":"module"}