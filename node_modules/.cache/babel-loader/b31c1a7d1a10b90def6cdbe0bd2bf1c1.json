{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { FlyControls as FlyControls$1 } from 'three-stdlib';\nconst FlyControls = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    onChange,\n    ...rest\n  } = props;\n  const invalidate = useThree(_ref => {\n    let {\n      invalidate\n    } = _ref;\n    return invalidate;\n  });\n  const camera = useThree(_ref2 => {\n    let {\n      camera\n    } = _ref2;\n    return camera;\n  });\n  const gl = useThree(_ref3 => {\n    let {\n      gl\n    } = _ref3;\n    return gl;\n  });\n  const [controls] = React.useState(() => new FlyControls$1(camera, gl.domElement));\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (onChange) onChange(e);\n    };\n\n    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('change', callback);\n    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('change', callback);\n  }, [onChange, controls, invalidate]);\n  useFrame((_, delta) => controls == null ? void 0 : controls.update(delta));\n  return controls ? /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    dispose: undefined,\n    object: controls\n  }, rest)) : null;\n});\nexport { FlyControls };","map":null,"metadata":{},"sourceType":"module"}