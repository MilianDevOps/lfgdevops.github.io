{"ast":null,"code":"import _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Quaternion, Vector3 } from 'three';\n\nfunction contextmenu(event) {\n  event.preventDefault();\n}\n\nvar FlyControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(FlyControls, _EventDispatcher);\n\n  var _super = _createSuper(FlyControls);\n\n  function FlyControls(object, domElement) {\n    var _this;\n\n    _classCallCheck(this, FlyControls);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"object\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"domElement\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"movementSpeed\", 1.0);\n\n    _defineProperty(_assertThisInitialized(_this), \"rollSpeed\", 0.005);\n\n    _defineProperty(_assertThisInitialized(_this), \"dragToLook\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"autoForward\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"changeEvent\", {\n      type: 'change'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"EPS\", 0.000001);\n\n    _defineProperty(_assertThisInitialized(_this), \"tmpQuaternion\", new Quaternion());\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseStatus\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"movementSpeedMultiplier\", 1);\n\n    _defineProperty(_assertThisInitialized(_this), \"moveState\", {\n      up: 0,\n      down: 0,\n      left: 0,\n      right: 0,\n      forward: 0,\n      back: 0,\n      pitchUp: 0,\n      pitchDown: 0,\n      yawLeft: 0,\n      yawRight: 0,\n      rollLeft: 0,\n      rollRight: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveVector\", new Vector3(0, 0, 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"rotationVector\", new Vector3(0, 0, 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"keydown\", function (event) {\n      if (event.altKey) {\n        return;\n      }\n\n      switch (event.code) {\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          _this.movementSpeedMultiplier = 0.1;\n          break;\n\n        case 'KeyW':\n          _this.moveState.forward = 1;\n          break;\n\n        case 'KeyS':\n          _this.moveState.back = 1;\n          break;\n\n        case 'KeyA':\n          _this.moveState.left = 1;\n          break;\n\n        case 'KeyD':\n          _this.moveState.right = 1;\n          break;\n\n        case 'KeyR':\n          _this.moveState.up = 1;\n          break;\n\n        case 'KeyF':\n          _this.moveState.down = 1;\n          break;\n\n        case 'ArrowUp':\n          _this.moveState.pitchUp = 1;\n          break;\n\n        case 'ArrowDown':\n          _this.moveState.pitchDown = 1;\n          break;\n\n        case 'ArrowLeft':\n          _this.moveState.yawLeft = 1;\n          break;\n\n        case 'ArrowRight':\n          _this.moveState.yawRight = 1;\n          break;\n\n        case 'KeyQ':\n          _this.moveState.rollLeft = 1;\n          break;\n\n        case 'KeyE':\n          _this.moveState.rollRight = 1;\n          break;\n      }\n\n      _this.updateMovementVector();\n\n      _this.updateRotationVector();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyup\", function (event) {\n      switch (event.code) {\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          _this.movementSpeedMultiplier = 1;\n          break;\n\n        case 'KeyW':\n          _this.moveState.forward = 0;\n          break;\n\n        case 'KeyS':\n          _this.moveState.back = 0;\n          break;\n\n        case 'KeyA':\n          _this.moveState.left = 0;\n          break;\n\n        case 'KeyD':\n          _this.moveState.right = 0;\n          break;\n\n        case 'KeyR':\n          _this.moveState.up = 0;\n          break;\n\n        case 'KeyF':\n          _this.moveState.down = 0;\n          break;\n\n        case 'ArrowUp':\n          _this.moveState.pitchUp = 0;\n          break;\n\n        case 'ArrowDown':\n          _this.moveState.pitchDown = 0;\n          break;\n\n        case 'ArrowLeft':\n          _this.moveState.yawLeft = 0;\n          break;\n\n        case 'ArrowRight':\n          _this.moveState.yawRight = 0;\n          break;\n\n        case 'KeyQ':\n          _this.moveState.rollLeft = 0;\n          break;\n\n        case 'KeyE':\n          _this.moveState.rollRight = 0;\n          break;\n      }\n\n      _this.updateMovementVector();\n\n      _this.updateRotationVector();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mousedown\", function (event) {\n      if (_this.dragToLook) {\n        _this.mouseStatus++;\n      } else {\n        switch (event.button) {\n          case 0:\n            _this.moveState.forward = 1;\n            break;\n\n          case 2:\n            _this.moveState.back = 1;\n            break;\n        }\n\n        _this.updateMovementVector();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mousemove\", function (event) {\n      if (!_this.dragToLook || _this.mouseStatus > 0) {\n        var container = _this.getContainerDimensions();\n\n        var halfWidth = container.size[0] / 2;\n        var halfHeight = container.size[1] / 2;\n        _this.moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;\n        _this.moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;\n\n        _this.updateRotationVector();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseup\", function (event) {\n      if (_this.dragToLook) {\n        _this.mouseStatus--;\n        _this.moveState.yawLeft = _this.moveState.pitchDown = 0;\n      } else {\n        switch (event.button) {\n          case 0:\n            _this.moveState.forward = 0;\n            break;\n\n          case 2:\n            _this.moveState.back = 0;\n            break;\n        }\n\n        _this.updateMovementVector();\n      }\n\n      _this.updateRotationVector();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"lastQuaternion\", new Quaternion());\n\n    _defineProperty(_assertThisInitialized(_this), \"lastPosition\", new Vector3());\n\n    _defineProperty(_assertThisInitialized(_this), \"update\", function (delta) {\n      var moveMult = delta * _this.movementSpeed;\n      var rotMult = delta * _this.rollSpeed;\n\n      _this.object.translateX(_this.moveVector.x * moveMult);\n\n      _this.object.translateY(_this.moveVector.y * moveMult);\n\n      _this.object.translateZ(_this.moveVector.z * moveMult);\n\n      _this.tmpQuaternion.set(_this.rotationVector.x * rotMult, _this.rotationVector.y * rotMult, _this.rotationVector.z * rotMult, 1).normalize();\n\n      _this.object.quaternion.multiply(_this.tmpQuaternion);\n\n      if (_this.lastPosition.distanceToSquared(_this.object.position) > _this.EPS || 8 * (1 - _this.lastQuaternion.dot(_this.object.quaternion)) > _this.EPS) {\n        _this.dispatchEvent(_this.changeEvent);\n\n        _this.lastQuaternion.copy(_this.object.quaternion);\n\n        _this.lastPosition.copy(_this.object.position);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateMovementVector\", function () {\n      var forward = _this.moveState.forward || _this.autoForward && !_this.moveState.back ? 1 : 0;\n      _this.moveVector.x = -_this.moveState.left + _this.moveState.right;\n      _this.moveVector.y = -_this.moveState.down + _this.moveState.up;\n      _this.moveVector.z = -forward + _this.moveState.back;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateRotationVector\", function () {\n      _this.rotationVector.x = -_this.moveState.pitchDown + _this.moveState.pitchUp;\n      _this.rotationVector.y = -_this.moveState.yawRight + _this.moveState.yawLeft;\n      _this.rotationVector.z = -_this.moveState.rollRight + _this.moveState.rollLeft;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getContainerDimensions\", function () {\n      if (_this.domElement != document && !(_this.domElement instanceof Document)) {\n        return {\n          size: [_this.domElement.offsetWidth, _this.domElement.offsetHeight],\n          offset: [_this.domElement.offsetLeft, _this.domElement.offsetTop]\n        };\n      } else {\n        return {\n          size: [window.innerWidth, window.innerHeight],\n          offset: [0, 0]\n        };\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dispose\", function () {\n      _this.domElement.removeEventListener('contextmenu', contextmenu);\n\n      _this.domElement.removeEventListener('mousemove', _this.mousemove);\n\n      _this.domElement.removeEventListener('mousedown', _this.mousedown);\n\n      _this.domElement.removeEventListener('mouseup', _this.mouseup);\n\n      window.removeEventListener('keydown', _this.keydown);\n      window.removeEventListener('keyup', _this.keyup);\n    });\n\n    if (domElement === undefined) {\n      console.warn('THREE.FlyControls: The second parameter \"domElement\" is now mandatory.');\n      domElement = document;\n    }\n\n    _this.object = object;\n    _this.domElement = domElement;\n\n    if (domElement && !(domElement instanceof Document)) {\n      domElement.setAttribute('tabindex', -1);\n    }\n\n    _this.domElement.addEventListener('contextmenu', contextmenu);\n\n    _this.domElement.addEventListener('mousemove', _this.mousemove);\n\n    _this.domElement.addEventListener('mousedown', _this.mousedown);\n\n    _this.domElement.addEventListener('mouseup', _this.mouseup);\n\n    window.addEventListener('keydown', _this.keydown);\n    window.addEventListener('keyup', _this.keyup);\n\n    _this.updateMovementVector();\n\n    _this.updateRotationVector();\n\n    return _this;\n  }\n\n  return _createClass(FlyControls);\n}(EventDispatcher);\n\nexport { FlyControls };","map":null,"metadata":{},"sourceType":"module"}