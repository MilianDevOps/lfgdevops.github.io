{"ast":null,"code":"import _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\n\nvar ConvexGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(ConvexGeometry, _BufferGeometry);\n\n  var _super = _createSuper(ConvexGeometry);\n\n  function ConvexGeometry(points) {\n    var _this;\n\n    _classCallCheck(this, ConvexGeometry);\n\n    _this = _super.call(this); // buffers\n\n    var vertices = [];\n    var normals = [];\n\n    if (ConvexHull === undefined) {\n      console.error('THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on ConvexHull');\n    }\n\n    var convexHull = new ConvexHull().setFromPoints(points); // generate vertices and normals\n\n    var faces = convexHull.faces;\n\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i];\n      var edge = face.edge; // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        var point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    } // build geometry\n\n\n    _this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n    _this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n    return _this;\n  }\n\n  return _createClass(ConvexGeometry);\n}(BufferGeometry);\n\nexport { ConvexGeometry };","map":null,"metadata":{},"sourceType":"module"}