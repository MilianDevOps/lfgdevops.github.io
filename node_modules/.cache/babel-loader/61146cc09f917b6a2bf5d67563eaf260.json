{"ast":null,"code":"import _defineProperty from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"context\", \"children\"],\n    _excluded2 = [\"children\", \"range\", \"limit\", \"frames\"],\n    _excluded3 = [\"meshes\", \"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport Composer from 'react-composer';\nimport { Position } from '../helpers/Position.js';\nvar i, instanceRef;\nvar globalContext = /*#__PURE__*/React.createContext(null);\nvar parentMatrix = new THREE.Matrix4();\nvar instanceMatrix = new THREE.Matrix4();\nvar tempMatrix = new THREE.Matrix4();\nvar color = new THREE.Color();\nvar translation = new THREE.Vector3();\nvar rotation = new THREE.Quaternion();\nvar scale = new THREE.Vector3();\nvar Instance = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var context = _ref.context,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  React.useMemo(function () {\n    return extend({\n      Position: Position\n    });\n  }, []);\n  var group = React.useRef();\n\n  var _React$useContext = React.useContext(context || globalContext),\n      subscribe = _React$useContext.subscribe,\n      getParent = _React$useContext.getParent;\n\n  React.useLayoutEffect(function () {\n    return subscribe(group);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"position\", _extends({\n    instance: getParent(),\n    instanceKey: group,\n    ref: mergeRefs([ref, group])\n  }, props), children);\n});\nvar Instances = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      range = _ref2.range,\n      _ref2$limit = _ref2.limit,\n      limit = _ref2$limit === void 0 ? 1000 : _ref2$limit,\n      _ref2$frames = _ref2.frames,\n      frames = _ref2$frames === void 0 ? Infinity : _ref2$frames,\n      props = _objectWithoutProperties(_ref2, _excluded2);\n\n  var _React$useState = React.useState(function () {\n    var context = /*#__PURE__*/React.createContext(null);\n    return {\n      context: context,\n      instance: /*#__PURE__*/React.forwardRef(function (props, ref) {\n        return /*#__PURE__*/React.createElement(Instance, _extends({\n          context: context\n        }, props, {\n          ref: ref\n        }));\n      })\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      _React$useState2$ = _React$useState2[0],\n      context = _React$useState2$.context,\n      instance = _React$useState2$.instance;\n\n  var parentRef = React.useRef(null);\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      instances = _React$useState4[0],\n      setInstances = _React$useState4[1];\n\n  var _React$useState5 = React.useState(function () {\n    var mArray = new Float32Array(limit * 16);\n\n    for (i = 0; i < limit; i++) {\n      tempMatrix.identity().toArray(mArray, i * 16);\n    }\n\n    return [mArray, new Float32Array(_toConsumableArray(new Array(limit * 3)).map(function () {\n      return 1;\n    }))];\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      _React$useState6$ = _slicedToArray(_React$useState6[0], 2),\n      matrices = _React$useState6$[0],\n      colors = _React$useState6$[1];\n\n  React.useLayoutEffect(function () {\n    parentRef.current.count = parentRef.current.instanceMatrix.updateRange.count = parentRef.current.instanceColor.updateRange.count = Math.min(limit, range !== undefined ? range : limit, instances.length);\n  }, [instances, range]);\n  React.useEffect(function () {\n    // We might be a frame too late? 🤷‍♂️\n    parentRef.current.instanceMatrix.needsUpdate = true;\n  });\n  var count = 0;\n  useFrame(function () {\n    if (frames === Infinity || count < frames) {\n      parentRef.current.updateMatrix();\n      parentRef.current.updateMatrixWorld();\n      parentMatrix.copy(parentRef.current.matrixWorld).invert();\n\n      for (i = 0; i < instances.length; i++) {\n        instanceRef = instances[i].current; // Multiply the inverse of the InstancedMesh world matrix or else\n        // Instances will be double-transformed if <Instances> isn't at identity\n\n        instanceRef.matrixWorld.decompose(translation, rotation, scale);\n        instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix);\n\n        if (!instanceMatrix.equals(tempMatrix.fromArray(matrices, i * 16))) {\n          instanceMatrix.toArray(matrices, i * 16);\n          parentRef.current.instanceMatrix.needsUpdate = true;\n        }\n\n        if (!instanceRef.color.equals(color.fromArray(colors, i * 3))) {\n          instanceRef.color.toArray(colors, i * 3);\n          parentRef.current.instanceColor.needsUpdate = true;\n        }\n      }\n\n      count++;\n    }\n  });\n  var api = React.useMemo(function () {\n    return {\n      getParent: function getParent() {\n        return parentRef;\n      },\n      subscribe: function subscribe(ref) {\n        setInstances(function (instances) {\n          return [].concat(_toConsumableArray(instances), [ref]);\n        });\n        return function () {\n          return setInstances(function (instances) {\n            return instances.filter(function (item) {\n              return item.current !== ref.current;\n            });\n          });\n        };\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", _extends({\n    userData: {\n      instances: instances\n    },\n    matrixAutoUpdate: false,\n    ref: mergeRefs([ref, parentRef]),\n    args: [null, null, 0],\n    raycast: function raycast() {\n      return null;\n    }\n  }, props), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceMatrix\",\n    count: matrices.length / 16,\n    array: matrices,\n    itemSize: 16,\n    usage: THREE.DynamicDrawUsage\n  }), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceColor\",\n    count: colors.length / 3,\n    array: colors,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), typeof children === 'function' ? /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children(instance)) : /*#__PURE__*/React.createElement(globalContext.Provider, {\n    value: api\n  }, children));\n});\n\nfunction Merged(_ref3) {\n  var meshes = _ref3.meshes,\n      children = _ref3.children,\n      props = _objectWithoutProperties(_ref3, _excluded3);\n\n  var isArray = Array.isArray(meshes); // Filter out meshes from collections, which may contain non-meshes\n\n  if (!isArray) for (var _i = 0, _Object$keys = Object.keys(meshes); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (!meshes[key].isMesh) delete meshes[key];\n  }\n  return /*#__PURE__*/React.createElement(Composer, {\n    components: (isArray ? meshes : Object.values(meshes)).map(function (_ref4) {\n      var geometry = _ref4.geometry,\n          material = _ref4.material;\n      return /*#__PURE__*/React.createElement(Instances, _extends({\n        key: geometry.uuid,\n        geometry: geometry,\n        material: material\n      }, props));\n    })\n  }, function (args) {\n    return isArray ? children.apply(void 0, _toConsumableArray(args)) : children(Object.keys(meshes).filter(function (key) {\n      return meshes[key].isMesh;\n    }).reduce(function (acc, key, i) {\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, args[i]));\n    }, {}));\n  });\n}\n\nexport { Instance, Instances, Merged };","map":null,"metadata":{},"sourceType":"module"}