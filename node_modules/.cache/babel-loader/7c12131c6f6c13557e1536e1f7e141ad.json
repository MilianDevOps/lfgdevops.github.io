{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\n\nvar LineGeometry = /*#__PURE__*/function (_LineSegmentsGeometry) {\n  _inherits(LineGeometry, _LineSegmentsGeometry);\n\n  var _super = _createSuper(LineGeometry);\n\n  function LineGeometry() {\n    var _thisSuper, _this;\n\n    _classCallCheck(this, LineGeometry);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'LineGeometry');\n\n    _defineProperty(_assertThisInitialized(_this), \"isLineGeometry\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"setColors\", function (array) {\n      // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n      var length = array.length - 3;\n      var colors = new Float32Array(2 * length);\n\n      for (var i = 0; i < length; i += 3) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n      }\n\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(LineGeometry.prototype)), \"setColors\", _thisSuper).call(_thisSuper, colors);\n\n      return _assertThisInitialized(_this);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fromLine\", function (line) {\n      var geometry = line.geometry;\n\n      if (geometry.isBufferGeometry) {\n        _this.setPositions(Array.from(geometry.attributes.position.array)); // assumes non-indexed\n\n      } // set colors, maybe\n\n\n      return _assertThisInitialized(_this);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"copy\", function () {\n      // todo\n      return _assertThisInitialized(_this);\n    });\n\n    return _this;\n  }\n\n  _createClass(LineGeometry, [{\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n      var length = array.length - 3;\n      var points = new Float32Array(2 * length);\n\n      for (var i = 0; i < length; i += 3) {\n        points[2 * i] = array[i];\n        points[2 * i + 1] = array[i + 1];\n        points[2 * i + 2] = array[i + 2];\n        points[2 * i + 3] = array[i + 3];\n        points[2 * i + 4] = array[i + 4];\n        points[2 * i + 5] = array[i + 5];\n      }\n\n      _get(_getPrototypeOf(LineGeometry.prototype), \"setPositions\", this).call(this, points);\n\n      return this;\n    }\n  }]);\n\n  return LineGeometry;\n}(LineSegmentsGeometry);\n\nexport { LineGeometry };","map":null,"metadata":{},"sourceType":"module"}