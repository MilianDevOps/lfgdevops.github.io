{"ast":null,"code":"import _toConsumableArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport deepEqual from 'fast-deep-equal';\nvar globalCache = [];\n\nfunction handleAsset(fn, cache, args) {\n  var lifespan = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var preload = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  var _iterator = _createForOfIteratorHelper(cache),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _entry = _step.value;\n\n      // Find a match\n      if (deepEqual(args, _entry.args)) {\n        // If we're pre-loading and the element is present, just return\n        if (preload) return; // If an error occurred, throw\n\n        if (_entry.error) throw _entry.error; // If a response was successful, return\n\n        if (_entry.response) return _entry.response; // If the promise is still unresolved, throw\n\n        throw _entry.promise;\n      }\n    } // The request is new or has changed.\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var entry = {\n    args: args,\n    promise: // Make the promise request.\n    fn.apply(void 0, _toConsumableArray(args)) // Response can't be undefined or else the loop above wouldn't be able to return it\n    // This is for promises that do not return results (delays for instance)\n    .then(function (response) {\n      return entry.response = response != null ? response : true;\n    }).catch(function (e) {\n      return entry.error = e != null ? e : 'unknown error';\n    }).then(function () {\n      if (lifespan > 0) {\n        setTimeout(function () {\n          var index = cache.indexOf(entry);\n          if (index !== -1) cache.splice(index, 1);\n        }, lifespan);\n      }\n    })\n  };\n  cache.push(entry);\n  if (!preload) throw entry.promise;\n}\n\nfunction _clear(cache) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (args === undefined || args.length === 0) cache.splice(0, cache.length);else {\n    var entry = cache.find(function (entry) {\n      return deepEqual(args, entry.args);\n    });\n\n    if (entry) {\n      var index = cache.indexOf(entry);\n      if (index !== -1) cache.splice(index, 1);\n    }\n  }\n}\n\nfunction createAsset(fn) {\n  var lifespan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var cache = [];\n  return {\n    /**\n     * @throws Suspense Promise if asset is not yet ready\n     * @throws Error if the promise rejected for some reason\n     */\n    read: function read() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return handleAsset(fn, cache, args, lifespan);\n    },\n    preload: function preload() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return void handleAsset(fn, cache, args, lifespan, true);\n    },\n    clear: function clear() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return _clear.apply(void 0, [cache].concat(args));\n    },\n    peek: function peek() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      var _cache$find;\n\n      return (_cache$find = cache.find(function (entry) {\n        return deepEqual(args, entry.args);\n      })) == null ? void 0 : _cache$find.response;\n    }\n  };\n}\n\nfunction useAsset(fn) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  return handleAsset(fn, globalCache, args, useAsset.lifespan);\n}\n\nuseAsset.lifespan = 0;\n\nuseAsset.clear = function () {\n  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    args[_key7] = arguments[_key7];\n  }\n\n  return _clear.apply(void 0, [globalCache].concat(args));\n};\n\nuseAsset.preload = function (fn) {\n  for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    args[_key8 - 1] = arguments[_key8];\n  }\n\n  return void handleAsset(fn, globalCache, args, useAsset.lifespan, true);\n};\n\nuseAsset.peek = function () {\n  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    args[_key9] = arguments[_key9];\n  }\n\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(function (entry) {\n    return deepEqual(args, entry.args);\n  })) == null ? void 0 : _globalCache$find.response;\n};\n\nexport { createAsset, useAsset };","map":null,"metadata":{},"sourceType":"module"}