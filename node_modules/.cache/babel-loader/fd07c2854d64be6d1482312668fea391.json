{"ast":null,"code":"import _objectSpread from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/regenerator/index.js\";\n\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nvar MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\n\nfunction fetchJsonFile(_x) {\n  return _fetchJsonFile.apply(this, arguments);\n}\n\nfunction _fetchJsonFile() {\n  _fetchJsonFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(path);\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 7:\n            return _context.abrupt(\"return\", response.json());\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchJsonFile.apply(this, arguments);\n}\n\nfunction fetchProfilesList(_x2) {\n  return _fetchProfilesList.apply(this, arguments);\n}\n\nfunction _fetchProfilesList() {\n  _fetchProfilesList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(basePath) {\n    var profileListFileName, profilesList;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (basePath) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error('No basePath supplied');\n\n          case 2:\n            profileListFileName = 'profilesList.json';\n            _context2.next = 5;\n            return fetchJsonFile(\"\".concat(basePath, \"/\").concat(profileListFileName));\n\n          case 5:\n            profilesList = _context2.sent;\n            return _context2.abrupt(\"return\", profilesList);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchProfilesList.apply(this, arguments);\n}\n\nfunction fetchProfile(_x3, _x4) {\n  return _fetchProfile.apply(this, arguments);\n}\n/** @constant {Object} */\n\n\nfunction _fetchProfile() {\n  _fetchProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(xrInputSource, basePath) {\n    var defaultProfile,\n        getAssetPath,\n        supportedProfilesList,\n        match,\n        supportedProfile,\n        profile,\n        assetPath,\n        layout,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            defaultProfile = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : null;\n            getAssetPath = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n\n            if (xrInputSource) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new Error('No xrInputSource supplied');\n\n          case 4:\n            if (basePath) {\n              _context3.next = 6;\n              break;\n            }\n\n            throw new Error('No basePath supplied');\n\n          case 6:\n            _context3.next = 8;\n            return fetchProfilesList(basePath);\n\n          case 8:\n            supportedProfilesList = _context3.sent;\n            xrInputSource.profiles.some(function (profileId) {\n              var supportedProfile = supportedProfilesList[profileId];\n\n              if (supportedProfile) {\n                match = {\n                  profileId: profileId,\n                  profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n                  deprecated: !!supportedProfile.deprecated\n                };\n              }\n\n              return !!match;\n            });\n\n            if (match) {\n              _context3.next = 17;\n              break;\n            }\n\n            if (defaultProfile) {\n              _context3.next = 13;\n              break;\n            }\n\n            throw new Error('No matching profile name found');\n\n          case 13:\n            supportedProfile = supportedProfilesList[defaultProfile];\n\n            if (supportedProfile) {\n              _context3.next = 16;\n              break;\n            }\n\n            throw new Error(\"No matching profile name found and default profile \\\"\".concat(defaultProfile, \"\\\" missing.\"));\n\n          case 16:\n            match = {\n              profileId: defaultProfile,\n              profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n              deprecated: !!supportedProfile.deprecated\n            };\n\n          case 17:\n            _context3.next = 19;\n            return fetchJsonFile(match.profilePath);\n\n          case 19:\n            profile = _context3.sent;\n\n            if (!getAssetPath) {\n              _context3.next = 25;\n              break;\n            }\n\n            if (xrInputSource.handedness === 'any') {\n              layout = profile.layouts[Object.keys(profile.layouts)[0]];\n            } else {\n              layout = profile.layouts[xrInputSource.handedness];\n            }\n\n            if (layout) {\n              _context3.next = 24;\n              break;\n            }\n\n            throw new Error(\"No matching handedness, \".concat(xrInputSource.handedness, \", in profile \").concat(match.profileId));\n\n          case 24:\n            if (layout.assetPath) {\n              assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n            }\n\n          case 25:\n            return _context3.abrupt(\"return\", {\n              profile: profile,\n              assetPath: assetPath\n            });\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _fetchProfile.apply(this, arguments);\n}\n\nvar defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xAxis = x;\n  var yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  var hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    var theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n\n  var result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\n\n\nvar VisualResponse = /*#__PURE__*/function () {\n  function VisualResponse(visualResponseDescription) {\n    _classCallCheck(this, VisualResponse);\n\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  _createClass(VisualResponse, [{\n    key: \"updateFromComponent\",\n    value: function updateFromComponent(_ref) {\n      var xAxis = _ref.xAxis,\n          yAxis = _ref.yAxis,\n          button = _ref.button,\n          state = _ref.state;\n\n      var _normalizeAxes = normalizeAxes(xAxis, yAxis),\n          normalizedXAxis = _normalizeAxes.normalizedXAxis,\n          normalizedYAxis = _normalizeAxes.normalizedYAxis;\n\n      switch (this.componentProperty) {\n        case MotionControllerConstants.ComponentProperty.X_AXIS:\n          this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.Y_AXIS:\n          this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.BUTTON:\n          this.value = this.states.includes(state) ? button : 0;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.STATE:\n          if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            this.value = this.states.includes(state);\n          } else {\n            this.value = this.states.includes(state) ? 1.0 : 0.0;\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unexpected visualResponse componentProperty \".concat(this.componentProperty));\n      }\n    }\n  }]);\n\n  return VisualResponse;\n}();\n\nvar Component = /*#__PURE__*/function () {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  function Component(componentId, componentDescription) {\n    var _this = this;\n\n    _classCallCheck(this, Component);\n\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(function (responseName) {\n      var visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      _this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n\n  _createClass(Component, [{\n    key: \"data\",\n    get: function get() {\n      var data = _objectSpread({\n        id: this.id\n      }, this.values);\n\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     * @param {Object} gamepad - The gamepad object from which the component data should be polled\n     */\n\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad(gamepad) {\n      var _this2 = this;\n\n      // Set the state to default before processing other data sources\n      this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n      if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n        var gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n        this.values.button = gamepadButton.value;\n        this.values.button = this.values.button < 0 ? 0 : this.values.button;\n        this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n        if (gamepadButton.pressed || this.values.button === 1) {\n          this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n        } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Get and normalize x axis value\n\n\n      if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n        this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n        this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n        this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Get and normalize Y axis value\n\n\n      if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n        this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n        this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n        this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Update the visual response weights based on the current component data\n\n\n      Object.values(this.visualResponses).forEach(function (visualResponse) {\n        visualResponse.updateFromComponent(_this2.values);\n      });\n    }\n  }]);\n\n  return Component;\n}();\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\n\n\nvar MotionController = /*#__PURE__*/function () {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  function MotionController(xrInputSource, profile, assetUrl) {\n    var _this3 = this;\n\n    _classCallCheck(this, MotionController);\n\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(function (componentId) {\n      var componentDescription = _this3.layoutDescription.components[componentId];\n      _this3.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n\n  _createClass(MotionController, [{\n    key: \"gripSpace\",\n    get: function get() {\n      return this.xrInputSource.gripSpace;\n    }\n  }, {\n    key: \"targetRaySpace\",\n    get: function get() {\n      return this.xrInputSource.targetRaySpace;\n    }\n    /**\n     * @description Returns a subset of component data for simplified debugging\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      var data = [];\n      Object.values(this.components).forEach(function (component) {\n        data.push(component.data);\n      });\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     */\n\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad() {\n      var _this4 = this;\n\n      Object.values(this.components).forEach(function (component) {\n        component.updateFromGamepad(_this4.xrInputSource.gamepad);\n      });\n    }\n  }]);\n\n  return MotionController;\n}();\n\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":null,"metadata":{},"sourceType":"module"}