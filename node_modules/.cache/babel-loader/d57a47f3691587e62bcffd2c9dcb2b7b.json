{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { UniformsUtils, ShaderMaterial, LuminanceFormat, MathUtils, DataTexture, RedFormat, FloatType } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nvar GlitchPass = /*#__PURE__*/function (_Pass) {\n  _inherits(GlitchPass, _Pass);\n\n  var _super = _createSuper(GlitchPass);\n\n  function GlitchPass() {\n    var _this;\n\n    var dt_size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 64;\n\n    _classCallCheck(this, GlitchPass);\n\n    _this = _super.call(this);\n    if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on DigitalGlitch');\n    var shader = DigitalGlitch;\n    _this.uniforms = UniformsUtils.clone(shader.uniforms);\n    _this.uniforms['tDisp'].value = _this.generateHeightmap(dt_size);\n    _this.material = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    _this.fsQuad = new FullScreenQuad(_this.material);\n    _this.goWild = false;\n    _this.curF = 0;\n\n    _this.generateTrigger();\n\n    return _this;\n  }\n\n  _createClass(GlitchPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer\n    /*, deltaTime, maskActive */\n    ) {\n      if (renderer.capabilities.isWebGL2 === false) this.uniforms['tDisp'].value.format = LuminanceFormat;\n      this.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.uniforms['seed'].value = Math.random(); //default seeding\n\n      this.uniforms['byp'].value = 0;\n\n      if (this.curF % this.randX == 0 || this.goWild == true) {\n        this.uniforms['amount'].value = Math.random() / 30;\n        this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n        this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1);\n        this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1);\n        this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n        this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n        this.curF = 0;\n        this.generateTrigger();\n      } else if (this.curF % this.randX < this.randX / 5) {\n        this.uniforms['amount'].value = Math.random() / 90;\n        this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n        this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n        this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n        this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3);\n        this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3);\n      } else if (this.goWild == false) {\n        this.uniforms['byp'].value = 1;\n      }\n\n      this.curF++;\n\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n    }\n  }, {\n    key: \"generateTrigger\",\n    value: function generateTrigger() {\n      this.randX = MathUtils.randInt(120, 240);\n    }\n  }, {\n    key: \"generateHeightmap\",\n    value: function generateHeightmap(dt_size) {\n      var data_arr = new Float32Array(dt_size * dt_size);\n      var length = dt_size * dt_size;\n\n      for (var i = 0; i < length; i++) {\n        var val = MathUtils.randFloat(0, 1);\n        data_arr[i] = val;\n      }\n\n      var texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n      texture.needsUpdate = true;\n      return texture;\n    }\n  }]);\n\n  return GlitchPass;\n}(Pass);\n\nexport { GlitchPass };","map":null,"metadata":{},"sourceType":"module"}