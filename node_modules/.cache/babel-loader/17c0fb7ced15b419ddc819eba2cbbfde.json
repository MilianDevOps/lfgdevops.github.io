{"ast":null,"code":"import _asyncToGenerator from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CompressedTextureLoader, CompressedTexture, FileLoader, sRGBEncoding, LinearEncoding } from 'three';\nimport { BasisTextureLoader } from './BasisTextureLoader.js';\nimport { ZSTDDecoder } from 'zstddec';\nimport { read, KTX2Model, KTX2Transfer, KTX2SupercompressionScheme, KTX2ChannelUASTC, KTX2ChannelETC1S, KTX2Flags } from 'ktx-parse';\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and then relies on\n * THREE.BasisTextureLoader to complete the transcoding process.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nvar KTX2Loader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(KTX2Loader, _CompressedTextureLoa);\n\n  var _super = _createSuper(KTX2Loader);\n\n  function KTX2Loader(manager) {\n    var _this;\n\n    _classCallCheck(this, KTX2Loader);\n\n    _this = _super.call(this, manager);\n    _this.basisLoader = new BasisTextureLoader(manager);\n    _this.zstd = new ZSTDDecoder();\n\n    _this.zstd.init();\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n\n    return _this;\n  }\n\n  _createClass(KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.basisLoader.setTranscoderPath(path);\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(path) {\n      this.basisLoader.setWorkerLimit(path);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.basisLoader.detectSupport(renderer);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.basisLoader.dispose();\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var texture = new CompressedTexture();\n      var bufferPending = new Promise(function (resolve, reject) {\n        new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(url, resolve, onProgress, reject);\n      });\n      bufferPending.then(function (buffer) {\n        scope.parse(buffer, function (_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }, onError);\n      }).catch(onError);\n      return texture;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buffer, onLoad, onError) {\n      var scope = this;\n      var ktx = read(new Uint8Array(buffer));\n\n      if (ktx.pixelDepth > 0) {\n        throw new Error('THREE.KTX2Loader: Only 2D textures are currently supported.');\n      }\n\n      if (ktx.layerCount > 1) {\n        throw new Error('THREE.KTX2Loader: Array textures are not currently supported.');\n      }\n\n      if (ktx.faceCount > 1) {\n        throw new Error('THREE.KTX2Loader: Cube textures are not currently supported.');\n      }\n\n      var dfd = KTX2Utils.getBasicDFD(ktx);\n      KTX2Utils.createLevels(ktx, this.zstd).then(function (levels) {\n        var basisFormat = dfd.colorModel === KTX2Model.UASTC ? BasisTextureLoader.BasisFormat.UASTC_4x4 : BasisTextureLoader.BasisFormat.ETC1S;\n        var parseConfig = {\n          levels: levels,\n          width: ktx.pixelWidth,\n          height: ktx.pixelHeight,\n          basisFormat: basisFormat,\n          hasAlpha: KTX2Utils.getAlpha(ktx)\n        };\n\n        if (basisFormat === BasisTextureLoader.BasisFormat.ETC1S) {\n          parseConfig.globalData = ktx.globalData;\n        }\n\n        return scope.basisLoader.parseInternalAsync(parseConfig);\n      }).then(function (texture) {\n        texture.encoding = dfd.transferFunction === KTX2Transfer.SRGB ? sRGBEncoding : LinearEncoding;\n        texture.premultiplyAlpha = KTX2Utils.getPremultiplyAlpha(ktx);\n        onLoad(texture);\n      }).catch(onError);\n      return this;\n    }\n  }]);\n\n  return KTX2Loader;\n}(CompressedTextureLoader);\n\nvar KTX2Utils = {\n  createLevels: function () {\n    var _createLevels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ktx, zstd) {\n      var levels, width, height, levelIndex, levelWidth, levelHeight, levelData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD)) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return zstd.init();\n\n            case 3:\n              levels = [];\n              width = ktx.pixelWidth;\n              height = ktx.pixelHeight;\n\n              for (levelIndex = 0; levelIndex < ktx.levels.length; levelIndex++) {\n                levelWidth = Math.max(1, Math.floor(width / Math.pow(2, levelIndex)));\n                levelHeight = Math.max(1, Math.floor(height / Math.pow(2, levelIndex)));\n                levelData = ktx.levels[levelIndex].levelData;\n\n                if (ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD) {\n                  levelData = zstd.decode(levelData, ktx.levels[levelIndex].uncompressedByteLength);\n                }\n\n                levels.push({\n                  index: levelIndex,\n                  width: levelWidth,\n                  height: levelHeight,\n                  data: levelData\n                });\n              }\n\n              return _context.abrupt(\"return\", levels);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function createLevels(_x, _x2) {\n      return _createLevels.apply(this, arguments);\n    }\n\n    return createLevels;\n  }(),\n  getBasicDFD: function getBasicDFD(ktx) {\n    // Basic Data Format Descriptor Block is always the first DFD.\n    return ktx.dataFormatDescriptor[0];\n  },\n  getAlpha: function getAlpha(ktx) {\n    var dfd = this.getBasicDFD(ktx); // UASTC\n\n    if (dfd.colorModel === KTX2Model.UASTC) {\n      if ((dfd.samples[0].channelID & 0xf) === KTX2ChannelUASTC.RGBA) {\n        return true;\n      }\n\n      return false;\n    } // ETC1S\n\n\n    if (dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === KTX2ChannelETC1S.AAA) {\n      return true;\n    }\n\n    return false;\n  },\n  getPremultiplyAlpha: function getPremultiplyAlpha(ktx) {\n    var dfd = this.getBasicDFD(ktx);\n    return !!(dfd.flags & KTX2Flags.ALPHA_PREMULTIPLIED);\n  }\n};\nexport { KTX2Loader };","map":null,"metadata":{},"sourceType":"module"}