{"ast":null,"code":"import { Sphere } from '../math/Sphere.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nimport { InstancedBufferGeometry } from '../core/InstancedBufferGeometry.js';\nimport { InstancedBufferAttribute } from '../core/InstancedBufferAttribute.js';\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\nimport { getTypedArray } from '../utils.js';\n\nclass BufferGeometryLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(json) {\n    const interleavedBufferMap = {};\n    const arrayBufferMap = {};\n\n    function getInterleavedBuffer(json, uuid) {\n      if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n      const interleavedBuffers = json.interleavedBuffers;\n      const interleavedBuffer = interleavedBuffers[uuid];\n      const buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n      const array = getTypedArray(interleavedBuffer.type, buffer);\n      const ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n      ib.uuid = interleavedBuffer.uuid;\n      interleavedBufferMap[uuid] = ib;\n      return ib;\n    }\n\n    function getArrayBuffer(json, uuid) {\n      if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n      const arrayBuffers = json.arrayBuffers;\n      const arrayBuffer = arrayBuffers[uuid];\n      const ab = new Uint32Array(arrayBuffer).buffer;\n      arrayBufferMap[uuid] = ab;\n      return ab;\n    }\n\n    const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n    const index = json.data.index;\n\n    if (index !== undefined) {\n      const typedArray = getTypedArray(index.type, index.array);\n      geometry.setIndex(new BufferAttribute(typedArray, 1));\n    }\n\n    const attributes = json.data.attributes;\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      let bufferAttribute;\n\n      if (attribute.isInterleavedBufferAttribute) {\n        const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n        bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n      } else {\n        const typedArray = getTypedArray(attribute.type, attribute.array);\n        const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n        bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n      }\n\n      if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n      if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n      if (attribute.updateRange !== undefined) {\n        bufferAttribute.updateRange.offset = attribute.updateRange.offset;\n        bufferAttribute.updateRange.count = attribute.updateRange.count;\n      }\n\n      geometry.setAttribute(key, bufferAttribute);\n    }\n\n    const morphAttributes = json.data.morphAttributes;\n\n    if (morphAttributes) {\n      for (const key in morphAttributes) {\n        const attributeArray = morphAttributes[key];\n        const array = [];\n\n        for (let i = 0, il = attributeArray.length; i < il; i++) {\n          const attribute = attributeArray[i];\n          let bufferAttribute;\n\n          if (attribute.isInterleavedBufferAttribute) {\n            const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n            bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n          } else {\n            const typedArray = getTypedArray(attribute.type, attribute.array);\n            bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n          }\n\n          if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n          array.push(bufferAttribute);\n        }\n\n        geometry.morphAttributes[key] = array;\n      }\n    }\n\n    const morphTargetsRelative = json.data.morphTargetsRelative;\n\n    if (morphTargetsRelative) {\n      geometry.morphTargetsRelative = true;\n    }\n\n    const groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n    if (groups !== undefined) {\n      for (let i = 0, n = groups.length; i !== n; ++i) {\n        const group = groups[i];\n        geometry.addGroup(group.start, group.count, group.materialIndex);\n      }\n    }\n\n    const boundingSphere = json.data.boundingSphere;\n\n    if (boundingSphere !== undefined) {\n      const center = new Vector3();\n\n      if (boundingSphere.center !== undefined) {\n        center.fromArray(boundingSphere.center);\n      }\n\n      geometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n    }\n\n    if (json.name) geometry.name = json.name;\n    if (json.userData) geometry.userData = json.userData;\n    return geometry;\n  }\n\n}\n\nexport { BufferGeometryLoader };","map":null,"metadata":{},"sourceType":"module"}