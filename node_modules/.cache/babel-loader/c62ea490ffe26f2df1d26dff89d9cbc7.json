{"ast":null,"code":"import _slicedToArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\n\nvar PointMaterialImpl = /*#__PURE__*/function (_THREE$ShaderMaterial) {\n  _inherits(PointMaterialImpl, _THREE$ShaderMaterial);\n\n  var _super = _createSuper(PointMaterialImpl);\n\n  function PointMaterialImpl() {\n    _classCallCheck(this, PointMaterialImpl);\n\n    return _super.call(this, {\n      transparent: true,\n      uniforms: {\n        size: {\n          value: 1\n        }\n      },\n      vertexShader: THREE.ShaderLib.points.vertexShader,\n      fragmentShader: \"\\n      varying vec3 vColor;\\n      void main() {\\n        vec2 cxy = 2.0 * gl_PointCoord - 1.0;\\n        float r = dot(cxy, cxy);\\n        float delta = fwidth(r);\\n        vec3 color = vColor;\\n        gl_FragColor = vec4(color, 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r));\\n\\n        #include <tonemapping_fragment>\\n\\t      #include <encodings_fragment>\\n      }\",\n      vertexColors: true\n    });\n  }\n\n  _createClass(PointMaterialImpl, [{\n    key: \"scale\",\n    get: function get() {\n      return this.uniforms.size.value;\n    },\n    set: function set(v) {\n      this.uniforms.size.value = v;\n    }\n  }]);\n\n  return PointMaterialImpl;\n}(THREE.ShaderMaterial);\n\nvar PointMaterial = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _React$useState = React.useState(function () {\n    return new PointMaterialImpl();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      material = _React$useState2[0];\n\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    ref: ref,\n    attach: \"material\"\n  }, props));\n});\nexport { PointMaterial, PointMaterialImpl };","map":null,"metadata":{},"sourceType":"module"}