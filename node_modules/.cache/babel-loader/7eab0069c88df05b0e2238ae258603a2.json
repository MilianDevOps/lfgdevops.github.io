{"ast":null,"code":"import _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Mesh, Vector3, InstancedInterleavedBuffer, InterleavedBufferAttribute, Vector4, Matrix4, Line3, MathUtils } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nvar LineSegments2 = /*#__PURE__*/function (_Mesh) {\n  _inherits(LineSegments2, _Mesh);\n\n  var _super = _createSuper(LineSegments2);\n\n  function LineSegments2() {\n    var _this;\n\n    var _geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new LineSegmentsGeometry();\n\n    var _material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineMaterial({\n      color: Math.random() * 0xffffff\n    });\n\n    _classCallCheck(this, LineSegments2);\n\n    _this = _super.call(this, _geometry, _material);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'LineSegments2');\n\n    _defineProperty(_assertThisInitialized(_this), \"isLineSegments2\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"distStart\", new Vector3());\n\n    _defineProperty(_assertThisInitialized(_this), \"distEnd\", new Vector3());\n\n    _defineProperty(_assertThisInitialized(_this), \"computeLineDistances\", function () {\n      var geometry = _this.geometry;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd;\n      var lineDistances = new Float32Array(2 * instanceStart.data.count);\n\n      for (var i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        _this.distStart.fromBufferAttribute(instanceStart, i);\n\n        _this.distEnd.fromBufferAttribute(instanceEnd, i);\n\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + _this.distStart.distanceTo(_this.distEnd);\n      }\n\n      var instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return _assertThisInitialized(_this);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rayStart\", new Vector4());\n\n    _defineProperty(_assertThisInitialized(_this), \"rayEnd\", new Vector4());\n\n    _defineProperty(_assertThisInitialized(_this), \"ssOrigin\", new Vector4());\n\n    _defineProperty(_assertThisInitialized(_this), \"ssOrigin3\", new Vector3());\n\n    _defineProperty(_assertThisInitialized(_this), \"mvMatrix\", new Matrix4());\n\n    _defineProperty(_assertThisInitialized(_this), \"line\", new Line3());\n\n    _defineProperty(_assertThisInitialized(_this), \"closestPoint\", new Vector3());\n\n    _defineProperty(_assertThisInitialized(_this), \"raycast\", function (raycaster, intersects) {\n      if (raycaster.camera === null) {\n        console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n      }\n\n      var threshold = 0;\n      var ray = raycaster.ray;\n      var camera = raycaster.camera;\n      var projectionMatrix = camera.projectionMatrix;\n      var geometry = _this.geometry;\n      var material = _this.material;\n      var resolution = material.resolution;\n      var lineWidth = material.linewidth + threshold;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd; // camera forward is negative\n\n      var near = -camera.near; // pick a point 1 unit out along the ray to avoid the ray origin\n      // sitting at the camera origin which will cause \"w\" to be 0 when\n      // applying the projection matrix.\n\n      ray.at(1, _this.ssOrigin); // ndc space [ - 1.0, 1.0 ]\n\n      _this.ssOrigin.w = 1;\n\n      _this.ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n\n      _this.ssOrigin.applyMatrix4(projectionMatrix);\n\n      _this.ssOrigin.multiplyScalar(1 / _this.ssOrigin.w); // screen space\n\n\n      _this.ssOrigin.x *= resolution.x / 2;\n      _this.ssOrigin.y *= resolution.y / 2;\n      _this.ssOrigin.z = 0;\n\n      _this.ssOrigin3.set(_this.ssOrigin.x, _this.ssOrigin.y, _this.ssOrigin.z);\n\n      var matrixWorld = _this.matrixWorld;\n\n      _this.mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n\n      for (var i = 0, l = instanceStart.count; i < l; i++) {\n        _this.rayStart.fromBufferAttribute(instanceStart, i);\n\n        _this.rayEnd.fromBufferAttribute(instanceEnd, i);\n\n        _this.rayStart.w = 1;\n        _this.rayEnd.w = 1; // camera space\n\n        _this.rayStart.applyMatrix4(_this.mvMatrix);\n\n        _this.rayEnd.applyMatrix4(_this.mvMatrix); // skip the segment if it's entirely behind the camera\n\n\n        var isBehindCameraNear = _this.rayStart.z > near && _this.rayEnd.z > near;\n\n        if (isBehindCameraNear) {\n          continue;\n        } // trim the segment if it extends behind camera near\n\n\n        if (_this.rayStart.z > near) {\n          var deltaDist = _this.rayStart.z - _this.rayEnd.z;\n          var t = (_this.rayStart.z - near) / deltaDist;\n\n          _this.rayStart.lerp(_this.rayEnd, t);\n        } else if (_this.rayEnd.z > near) {\n          var _deltaDist = _this.rayEnd.z - _this.rayStart.z;\n\n          var _t = (_this.rayEnd.z - near) / _deltaDist;\n\n          _this.rayEnd.lerp(_this.rayStart, _t);\n        } // clip space\n\n\n        _this.rayStart.applyMatrix4(projectionMatrix);\n\n        _this.rayEnd.applyMatrix4(projectionMatrix); // ndc space [ - 1.0, 1.0 ]\n\n\n        _this.rayStart.multiplyScalar(1 / _this.rayStart.w);\n\n        _this.rayEnd.multiplyScalar(1 / _this.rayEnd.w); // screen space\n\n\n        _this.rayStart.x *= resolution.x / 2;\n        _this.rayStart.y *= resolution.y / 2;\n        _this.rayEnd.x *= resolution.x / 2;\n        _this.rayEnd.y *= resolution.y / 2; // create 2d segment\n\n        _this.line.start.set(_this.rayStart.x, _this.rayStart.y, _this.rayStart.z);\n\n        _this.line.start.z = 0;\n\n        _this.line.end.set(_this.rayEnd.x, _this.rayEnd.y, _this.rayEnd.z);\n\n        _this.line.end.z = 0; // get closest point on ray to segment\n\n        var param = _this.line.closestPointToPointParameter(_this.ssOrigin3, true);\n\n        _this.line.at(param, _this.closestPoint); // check if the intersection point is within clip space\n\n\n        var zPos = MathUtils.lerp(_this.rayStart.z, _this.rayEnd.z, param);\n        var isInClipSpace = zPos >= -1 && zPos <= 1;\n        var isInside = _this.ssOrigin3.distanceTo(_this.closestPoint) < lineWidth * 0.5;\n\n        if (isInClipSpace && isInside) {\n          _this.line.start.fromBufferAttribute(instanceStart, i);\n\n          _this.line.end.fromBufferAttribute(instanceEnd, i);\n\n          _this.line.start.applyMatrix4(matrixWorld);\n\n          _this.line.end.applyMatrix4(matrixWorld);\n\n          var pointOnLine = new Vector3();\n          var point = new Vector3();\n          ray.distanceSqToSegment(_this.line.start, _this.line.end, point, pointOnLine);\n          intersects.push({\n            distance: ray.origin.distanceTo(point),\n            point: point,\n            face: null,\n            faceIndex: i,\n            object: _assertThisInitialized(_this),\n            uv: undefined,\n            pointOnLine: pointOnLine\n          });\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  return _createClass(LineSegments2);\n}(Mesh);\n\nexport { LineSegments2 };","map":null,"metadata":{},"sourceType":"module"}