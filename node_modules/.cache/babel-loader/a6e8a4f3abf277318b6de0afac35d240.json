{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport VaryNode from '../core/VaryNode.js';\nimport ModelNode from './ModelNode.js';\nimport CameraNode from './CameraNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MathNode from '../math/MathNode.js';\n\nvar NormalNode = /*#__PURE__*/function (_Node) {\n  _inherits(NormalNode, _Node);\n\n  var _super = _createSuper(NormalNode);\n\n  function NormalNode() {\n    var _this;\n\n    var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NormalNode.LOCAL;\n\n    _classCallCheck(this, NormalNode);\n\n    _this = _super.call(this, 'vec3');\n    _this.scope = scope;\n    return _this;\n  }\n\n  _createClass(NormalNode, [{\n    key: \"getHash\",\n    value: function getHash() {\n      return \"normal-\".concat(this.scope);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var scope = this.scope;\n      var outputNode = null;\n\n      if (scope === NormalNode.GEOMETRY) {\n        outputNode = new AttributeNode('normal', 'vec3');\n      } else if (scope === NormalNode.LOCAL) {\n        outputNode = new VaryNode(new NormalNode(NormalNode.GEOMETRY));\n      } else if (scope === NormalNode.VIEW) {\n        var vertexNormalNode = new OperatorNode('*', new ModelNode(ModelNode.NORMAL_MATRIX), new NormalNode(NormalNode.LOCAL));\n        outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexNormalNode));\n      } else if (scope === NormalNode.WORLD) {\n        // To use INVERSE_TRANSFORM_DIRECTION only inverse the param order like this: MathNode( ..., Vector, Matrix );\n        var _vertexNormalNode = new MathNode(MathNode.TRANSFORM_DIRECTION, new NormalNode(NormalNode.VIEW), new CameraNode(CameraNode.VIEW_MATRIX));\n\n        outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(_vertexNormalNode));\n      }\n\n      return outputNode.build(builder);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(data) {\n      _get(_getPrototypeOf(NormalNode.prototype), \"serialize\", this).call(this, data);\n\n      data.scope = this.scope;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      _get(_getPrototypeOf(NormalNode.prototype), \"deserialize\", this).call(this, data);\n\n      this.scope = data.scope;\n    }\n  }]);\n\n  return NormalNode;\n}(Node);\n\n_defineProperty(NormalNode, \"GEOMETRY\", 'geometry');\n\n_defineProperty(NormalNode, \"LOCAL\", 'local');\n\n_defineProperty(NormalNode, \"WORLD\", 'world');\n\n_defineProperty(NormalNode, \"VIEW\", 'view');\n\nexport default NormalNode;","map":null,"metadata":{},"sourceType":"module"}