{"ast":null,"code":"import _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Vector3, Euler, Quaternion, MathUtils } from 'three';\n/**\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nvar DeviceOrientationControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(DeviceOrientationControls, _EventDispatcher);\n\n  var _super = _createSuper(DeviceOrientationControls);\n\n  // radians\n  function DeviceOrientationControls(object) {\n    var _this;\n\n    _classCallCheck(this, DeviceOrientationControls);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"object\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"changeEvent\", {\n      type: 'change'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"EPS\", 0.000001);\n\n    _defineProperty(_assertThisInitialized(_this), \"enabled\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"deviceOrientation\", {\n      alpha: 0,\n      beta: 0,\n      gamma: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"screenOrientation\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"alphaOffset\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeviceOrientationChangeEvent\", function (event) {\n      _this.deviceOrientation = event;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onScreenOrientationChangeEvent\", function () {\n      _this.screenOrientation = window.orientation || 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"zee\", new Vector3(0, 0, 1));\n\n    _defineProperty(_assertThisInitialized(_this), \"euler\", new Euler());\n\n    _defineProperty(_assertThisInitialized(_this), \"q0\", new Quaternion());\n\n    _defineProperty(_assertThisInitialized(_this), \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)));\n\n    _defineProperty(_assertThisInitialized(_this), \"setObjectQuaternion\", function (quaternion, alpha, beta, gamma, orient) {\n      _this.euler.set(beta, alpha, -gamma, 'YXZ'); // 'ZXY' for the device, but 'YXZ' for us\n\n\n      quaternion.setFromEuler(_this.euler); // orient the device\n\n      quaternion.multiply(_this.q1); // camera looks out the back of the device, not the top\n\n      quaternion.multiply(_this.q0.setFromAxisAngle(_this.zee, -orient)); // adjust for screen orientation\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connect\", function () {\n      _this.onScreenOrientationChangeEvent(); // run once on load\n      // iOS 13+\n\n\n      if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\n        window.DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response == 'granted') {\n            window.addEventListener('orientationchange', _this.onScreenOrientationChangeEvent);\n            window.addEventListener('deviceorientation', _this.onDeviceOrientationChangeEvent);\n          }\n        }).catch(function (error) {\n          console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\n        });\n      } else {\n        window.addEventListener('orientationchange', _this.onScreenOrientationChangeEvent);\n        window.addEventListener('deviceorientation', _this.onDeviceOrientationChangeEvent);\n      }\n\n      _this.enabled = true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"disconnect\", function () {\n      window.removeEventListener('orientationchange', _this.onScreenOrientationChangeEvent);\n      window.removeEventListener('deviceorientation', _this.onDeviceOrientationChangeEvent);\n      _this.enabled = false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"lastQuaternion\", new Quaternion());\n\n    _defineProperty(_assertThisInitialized(_this), \"update\", function () {\n      if (_this.enabled === false) return;\n      var device = _this.deviceOrientation;\n\n      if (device) {\n        var alpha = device.alpha ? MathUtils.degToRad(device.alpha) + _this.alphaOffset : 0; // Z\n\n        var beta = device.beta ? MathUtils.degToRad(device.beta) : 0; // X'\n\n        var gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0; // Y''\n\n        var orient = _this.screenOrientation ? MathUtils.degToRad(_this.screenOrientation) : 0; // O\n\n        _this.setObjectQuaternion(_this.object.quaternion, alpha, beta, gamma, orient);\n\n        if (8 * (1 - _this.lastQuaternion.dot(_this.object.quaternion)) > _this.EPS) {\n          _this.lastQuaternion.copy(_this.object.quaternion);\n\n          _this.dispatchEvent(_this.changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dispose\", function () {\n      return _this.disconnect();\n    });\n\n    _this.object = object;\n\n    _this.object.rotation.reorder('YXZ');\n\n    _this.connect();\n\n    return _this;\n  }\n\n  return _createClass(DeviceOrientationControls);\n}(EventDispatcher);\n\nexport { DeviceOrientationControls };","map":null,"metadata":{},"sourceType":"module"}