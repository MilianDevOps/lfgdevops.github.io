{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node from '../core/Node.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport ContextNode from '../core/ContextNode.js';\n\nvar CondNode = /*#__PURE__*/function (_Node) {\n  _inherits(CondNode, _Node);\n\n  var _super = _createSuper(CondNode);\n\n  function CondNode(node, ifNode, elseNode) {\n    var _this;\n\n    _classCallCheck(this, CondNode);\n\n    _this = _super.call(this);\n    _this.node = node;\n    _this.ifNode = ifNode;\n    _this.elseNode = elseNode;\n    return _this;\n  }\n\n  _createClass(CondNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      var ifType = this.ifNode.getNodeType(builder);\n      var elseType = this.elseNode.getNodeType(builder);\n\n      if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n        return elseType;\n      }\n\n      return ifType;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = this.getNodeType(builder);\n      var context = {\n        temp: false\n      };\n      var nodeProperty = new PropertyNode(null, type).build(builder);\n      var nodeSnippet = new ContextNode(this.node\n      /*, context*/\n      ).build(builder, 'bool'),\n          ifSnippet = new ContextNode(this.ifNode, context).build(builder, type),\n          elseSnippet = new ContextNode(this.elseNode, context).build(builder, type);\n      builder.addFlowCode(\"if ( \".concat(nodeSnippet, \" ) {\\n\\n\\t\\t\").concat(nodeProperty, \" = \").concat(ifSnippet, \";\\n\\n\\t} else {\\n\\n\\t\\t\").concat(nodeProperty, \" = \").concat(elseSnippet, \";\\n\\n\\t}\"));\n      return nodeProperty;\n    }\n  }]);\n\n  return CondNode;\n}(Node);\n\nexport default CondNode;","map":null,"metadata":{},"sourceType":"module"}