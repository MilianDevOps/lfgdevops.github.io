{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Line, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Mesh, MeshBasicMaterial, BackSide } from 'three';\n/**\n *  This helper must be added as a child of the light\n */\n\nvar RectAreaLightHelper = /*#__PURE__*/function (_Line) {\n  _inherits(RectAreaLightHelper, _Line);\n\n  var _super = _createSuper(RectAreaLightHelper);\n\n  function RectAreaLightHelper(light, color) {\n    var _this;\n\n    _classCallCheck(this, RectAreaLightHelper);\n\n    _this.light = light;\n    _this.color = color; // optional hardwired color for the helper\n\n    var positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    var material = new LineBasicMaterial({\n      fog: false\n    });\n    _this = _super.call(this, geometry, material);\n    _this.type = 'RectAreaLightHelper'; //\n\n    var positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n    var geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n\n    _this.add(new Mesh(geometry2, new MeshBasicMaterial({\n      side: BackSide,\n      fog: false\n    })));\n\n    return _this;\n  }\n\n  _createClass(RectAreaLightHelper, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld() {\n      this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);\n\n      if (this.color !== undefined) {\n        this.material.color.set(this.color);\n        this.children[0].material.color.set(this.color);\n      } else {\n        this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity); // prevent hue shift\n\n        var c = this.material.color;\n        var max = Math.max(c.r, c.g, c.b);\n        if (max > 1) c.multiplyScalar(1 / max);\n        this.children[0].material.color.copy(this.material.color);\n      }\n\n      this.matrixWorld.copy(this.light.matrixWorld).scale(this.scale);\n      this.children[0].matrixWorld.copy(this.matrixWorld);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.geometry.dispose();\n      this.material.dispose();\n      this.children[0].geometry.dispose();\n      this.children[0].material.dispose();\n    }\n  }]);\n\n  return RectAreaLightHelper;\n}(Line);\n\nexport { RectAreaLightHelper };","map":null,"metadata":{},"sourceType":"module"}