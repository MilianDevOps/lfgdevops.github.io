{"ast":null,"code":"import _classCallCheck from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport TempNode from '../core/TempNode.js';\n\nvar OperatorNode = /*#__PURE__*/function (_TempNode) {\n  _inherits(OperatorNode, _TempNode);\n\n  var _super = _createSuper(OperatorNode);\n\n  function OperatorNode(op, aNode, bNode) {\n    var _this;\n\n    _classCallCheck(this, OperatorNode);\n\n    _this = _super.call(this);\n    _this.op = op;\n\n    if ((arguments.length <= 3 ? 0 : arguments.length - 3) > 0) {\n      var finalBNode = bNode;\n\n      for (var i = 0; i < (arguments.length <= 3 ? 0 : arguments.length - 3); i++) {\n        finalBNode = new OperatorNode(op, finalBNode, i + 3 < 3 || arguments.length <= i + 3 ? undefined : arguments[i + 3]);\n      }\n\n      bNode = finalBNode;\n    }\n\n    _this.aNode = aNode;\n    _this.bNode = bNode;\n    return _this;\n  }\n\n  _createClass(OperatorNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder, output) {\n      var op = this.op;\n      var aNode = this.aNode;\n      var bNode = this.bNode;\n      var typeA = aNode.getNodeType(builder);\n      var typeB = bNode.getNodeType(builder);\n\n      if (typeA === 'void' || typeB === 'void') {\n        return 'void';\n      } else if (op === '=' || op === '%') {\n        return typeA;\n      } else if (op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<') {\n        return 'int';\n      } else if (op === '==' || op === '&&' || op === '||' || op === '^^') {\n        return 'bool';\n      } else if (op === '<' || op === '>' || op === '<=' || op === '>=') {\n        var typeLength = builder.getTypeLength(output);\n        return typeLength > 1 ? \"bvec\".concat(typeLength) : 'bool';\n      } else {\n        if (typeA === 'float' && builder.isMatrix(typeB)) {\n          return typeB;\n        } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n          // matrix x vector\n          return builder.getVectorFromMatrix(typeA);\n        } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n          // vector x matrix\n          return builder.getVectorFromMatrix(typeB);\n        } else if (builder.getTypeLength(typeB) > builder.getTypeLength(typeA)) {\n          // anytype x anytype: use the greater length vector\n          return typeB;\n        }\n\n        return typeA;\n      }\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      var op = this.op;\n      var aNode = this.aNode;\n      var bNode = this.bNode;\n      var type = this.getNodeType(builder, output);\n      var typeA = null;\n      var typeB = null;\n\n      if (type !== 'void') {\n        typeA = aNode.getNodeType(builder);\n        typeB = bNode.getNodeType(builder);\n\n        if (op === '=') {\n          typeB = typeA;\n        } else if (op === '<' || op === '>' || op === '<=' || op === '>=') {\n          if (builder.isVector(typeA)) {\n            typeB = typeA;\n          } else {\n            typeA = typeB = 'float';\n          }\n        } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n          // matrix x vector\n          typeB = builder.getVectorFromMatrix(typeA);\n        } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n          // vector x matrix\n          typeA = builder.getVectorFromMatrix(typeB);\n        } else {\n          // anytype x anytype\n          typeA = typeB = type;\n        }\n      } else {\n        typeA = typeB = type;\n      }\n\n      var a = aNode.build(builder, typeA);\n      var b = bNode.build(builder, typeB);\n      var outputLength = builder.getTypeLength(output);\n\n      if (output !== 'void') {\n        if (op === '=') {\n          builder.addFlowCode(\"\".concat(a, \" \").concat(this.op, \" \").concat(b));\n          return a;\n        } else if (op === '>' && outputLength > 1) {\n          return builder.format(\"\".concat(builder.getMethod('greaterThan'), \"( \").concat(a, \", \").concat(b, \" )\"), type, output);\n        } else if (op === '<=' && outputLength > 1) {\n          return builder.format(\"\".concat(builder.getMethod('lessThanEqual'), \"( \").concat(a, \", \").concat(b, \" )\"), type, output);\n        } else {\n          return builder.format(\"( \".concat(a, \" \").concat(this.op, \" \").concat(b, \" )\"), type, output);\n        }\n      } else if (typeA !== 'void') {\n        return builder.format(\"\".concat(a, \" \").concat(this.op, \" \").concat(b), type, output);\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(data) {\n      _get(_getPrototypeOf(OperatorNode.prototype), \"serialize\", this).call(this, data);\n\n      data.op = this.op;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      _get(_getPrototypeOf(OperatorNode.prototype), \"deserialize\", this).call(this, data);\n\n      this.op = data.op;\n    }\n  }]);\n\n  return OperatorNode;\n}(TempNode);\n\nexport default OperatorNode;","map":null,"metadata":{},"sourceType":"module"}