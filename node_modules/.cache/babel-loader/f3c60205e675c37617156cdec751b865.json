{"ast":null,"code":"import { Vector2 } from './Vector2.js';\n\nconst _vector = /*@__PURE__*/new Vector2();\n\nclass Box2 {\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2(+Infinity, +Infinity);\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2(-Infinity, -Infinity);\n    this.min = min;\n    this.max = max;\n  }\n\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n\n  setFromPoints(points) {\n    this.makeEmpty();\n\n    for (let i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n\n    return this;\n  }\n\n  setFromCenterAndSize(center, size) {\n    const halfSize = _vector.copy(size).multiplyScalar(0.5);\n\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n\n  makeEmpty() {\n    this.min.x = this.min.y = +Infinity;\n    this.max.x = this.max.y = -Infinity;\n    return this;\n  }\n\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n    return this.max.x < this.min.x || this.max.y < this.min.y;\n  }\n\n  getCenter(target) {\n    return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n\n  getSize(target) {\n    return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n  }\n\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n\n  containsPoint(point) {\n    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n  }\n\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n  }\n\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n  }\n\n  intersectsBox(box) {\n    // using 4 splitting planes to rule out intersections\n    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n  }\n\n  clampPoint(point, target) {\n    return target.copy(point).clamp(this.min, this.max);\n  }\n\n  distanceToPoint(point) {\n    const clampedPoint = _vector.copy(point).clamp(this.min, this.max);\n\n    return clampedPoint.sub(point).length();\n  }\n\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max);\n    return this;\n  }\n\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n\n}\n\nBox2.prototype.isBox2 = true;\nexport { Box2 };","map":null,"metadata":{},"sourceType":"module"}