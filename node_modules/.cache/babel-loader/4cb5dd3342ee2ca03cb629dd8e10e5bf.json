{"ast":null,"code":"var _jsxFileName = \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport Web3 from \"web3\";\nimport { BrowserRouter as Router, Routes, Route, Link, useNavigate, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Web3Context } from \"./contexts/Web3Context\";\nimport CyberDeck from \"./abis/CyberDeck.json\";\nimport FakeNFT from \"./abis/FakeNFT.json\";\nimport ERC721 from \"./abis/ERC721.json\";\nimport CONFIG from \"./config.json\";\nimport Home from \"./Pages/Home\";\nimport BootupScreen from \"./components/BootupScreen\";\nimport { WidthContainer } from \"./components/WidthContainer\";\nimport ConnectWalletScreen from \"./components/ConnectWalletScreen\";\nimport useKeyPress from \"./components/useKeyPress\";\nimport Whitepaper from \"./Pages/Whitepaper\";\nimport TerminalScreen from \"./components/TerminalScreen\";\nimport RoomSceneLoader from \"./components/RoomScene/RoomSceneLoader\";\nimport App3D from \"./App3D\";\nimport Mint from \"./Pages/Mint\";\nimport errorParser from \"./utils/errorParser\";\nimport { BrowserView, MobileView, isBrowser, isMobile } from \"react-device-detect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst allNFTS = [\"0x614e92021a82240bc73AB61e899FA75d91087964\", \"0x55B2431d6Aa7AD9A726f652305f21314d636A9c6\", \"0xa74C87459c8B03aB5234B4CcdD743e53DAd34f3C\"];\n\nfunction App() {\n  _s();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [web3, setWeb3] = useState(null);\n  const [cyberDeck, setCyberDeck] = useState(null);\n  const [fakeNft, setFakeNft] = useState(null);\n  const [supplyAvailable, setSupplyAvailable] = useState(0);\n  const [balanceOf, setBalanceOf] = useState(0);\n  const [supply, setTotalSupply] = useState(null);\n  const [price, setPrice] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [currentNetwork, setCurrentNetwork] = useState(null);\n  const clearKeyPress = useKeyPress(\"c\");\n  const [blockchainExplorerURL, setBlockchainExplorerURL] = useState(\"https://etherscan.io/\");\n  const [openseaURL, setOpenseaURL] = useState(\"https://opensea.io/collection/hogwash-polygon\");\n  const [isMinting, setIsMinting] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [message, setMessage] = useState(null);\n  const [currentTime, setCurrentTime] = useState(new Date().getTime());\n  const [revealTime, setRevealTime] = useState(0);\n  const [ownedTokens, setOwnedTokens] = useState(null);\n  const [allowedNfts, setAllowedNfts] = useState([]);\n  const [ownedAllowedNfts, setOwnedAllowedNfts] = useState([]); // ANIMATION CONSTS\n\n  const [isLoadingInitialData, setIsLoadingInitialData] = useState(false);\n  const [isLoadingCyberdeck, setIsLoadingCyberdeck] = useState(false);\n  const [isLoadingUserTokens, setIsLoadingUserTokens] = useState(false);\n  const [clearedBootup, setClearedBootup] = useState(false);\n\n  const mintNFTHandler = async _ref => {\n    let {\n      tokenAddress,\n      tokenId\n    } = _ref;\n\n    // Mint NFT\n    if (cyberDeck) {\n      setIsMinting(true);\n      setIsError(false);\n      const price = await cyberDeck.methods.price().call();\n      await cyberDeck.methods.buy(tokenAddress, tokenId).send({\n        from: account,\n        value: parseInt(price.toString()).toString()\n      }).on(\"receipt\", async () => {\n        try {\n          await loadBlockchainData(true);\n        } catch (e) {}\n      }).on(\"error\", error => {\n        window.alert(errorParser.parseError({\n          error: error.message.toString(),\n          errorSet: errorParser.cyberDeckErrors\n        }));\n        setIsError(true);\n      });\n    }\n\n    setIsMinting(false);\n  };\n\n  async function getParentNft(_ref2) {\n    let {\n      _account,\n      _index,\n      _cyberDeck\n    } = _ref2;\n\n    try {\n      const tokenId = await _cyberDeck.methods.tokenOfOwnerByIndex(_account, _index).call();\n      const parentNft = await _cyberDeck.methods.parentNfts(tokenId).call();\n      const nftContract = new web3.eth.Contract(ERC721.abi, parentNft.tokenAddress);\n      const ownerOfParent = await nftContract.methods.ownerOf(parentNft.tokenId).call();\n      let resp = {\n        cyberDeckOwner: _account,\n        index: _index,\n        tokenId: tokenId,\n        parentTokenAddress: parentNft.tokenAddress,\n        parentTokenId: parentNft.tokenId,\n        parentTokenOwner: ownerOfParent\n      };\n      return {\n        tokenData: resp\n      };\n    } catch (e) {\n      let resp = {\n        cyberDeckOwner: _account,\n        index: _index,\n        tokenId: -1,\n        error: e\n      };\n      return resp;\n    }\n  }\n\n  async function getNftAndMetadata(_ref3) {\n    let {} = _ref3;\n  }\n\n  async function getAllowedNFT(_ref4) {\n    let {\n      nftAddress,\n      _account\n    } = _ref4;\n\n    try {\n      const nftContract = new web3.eth.Contract(FakeNFT.abi, nftAddress);\n\n      const _bo = await nftContract.methods.balanceOf(_account).call();\n\n      let otp = [];\n      const [name, symbol] = await Promise.all([nftContract.methods.name().call(), nftContract.methods.symbol().call()]);\n\n      if (_bo < 1) {\n        return [];\n      }\n\n      for (let i = 0; i < _bo; i++) {\n        otp.push(nftContract.methods.tokenOfOwnerByIndex(_account, i).call());\n      }\n\n      const tIds = await Promise.all(otp);\n      let twd = [];\n\n      for (const id of tIds) {\n        twd.push({\n          name: name,\n          symbol: symbol,\n          address: nftAddress,\n          tokenId: id\n        });\n      }\n\n      return twd;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async function getAllAllowedNFTs(_ref5) {\n    let {\n      _account\n    } = _ref5;\n    let ap = [];\n\n    for (const a of allNFTS) {\n      ap.push(getAllowedNFT({\n        nftAddress: a,\n        _account: _account\n      }));\n    }\n\n    const al = await Promise.all(ap);\n    let allEm = [];\n\n    for (const l of al) {\n      allEm = [...allEm, ...l];\n    }\n\n    setOwnedAllowedNfts(allEm);\n  }\n\n  async function getOwnedTokens(_ref6) {\n    let {\n      _account,\n      _cyberDeck\n    } = _ref6;\n\n    const _balanceOf = await _cyberDeck.methods.balanceOf(_account).call();\n\n    let tokenPromises = [];\n\n    for (let i = 0; i < _balanceOf; i++) {\n      tokenPromises.push(getParentNft({\n        _account: _account,\n        _index: i,\n        _cyberDeck: _cyberDeck\n      }));\n    }\n\n    let ot = await Promise.all(tokenPromises);\n    ot = ot.filter(_ref7 => {\n      let {\n        tokenData\n      } = _ref7;\n      return tokenData && !tokenData.error && tokenData.parentTokenOwner && tokenData.parentTokenOwner.toString() === _account.toString();\n    });\n    setOwnedTokens(ot);\n  }\n\n  useEffect(() => {\n    if (clearKeyPress && !isLoadingInitialData) {\n      setClearedBootup(true);\n    }\n  }, [clearKeyPress]);\n\n  function clearMobileBootup() {\n    if (isMobile && !isLoadingInitialData) {\n      setClearedBootup(true);\n    }\n  }\n\n  const loadBlockchainData = async _clearedBootup => {\n    // Fetch Contract, Data, etc.\n    if (web3) {\n      setClearedBootup(_clearedBootup);\n      setIsLoadingInitialData(true);\n      const networkId = await web3.eth.net.getId();\n      setCurrentNetwork(networkId);\n\n      try {\n        if (!CyberDeck.networks[networkId] || !CyberDeck.networks[networkId].address) {\n          setIsLoadingInitialData(false); // window.alert(\"Please Connect to the Ethereum Mainnet\");\n\n          return;\n        }\n\n        const cyberDeck = new web3.eth.Contract(CyberDeck.abi, CyberDeck.networks[networkId].address);\n        const fakeNft = new web3.eth.Contract(FakeNFT.abi, FakeNFT.networks[networkId].address);\n        setIsLoadingCyberdeck(true);\n        setCyberDeck(cyberDeck);\n        setFakeNft(fakeNft);\n        const price = await cyberDeck.methods.price().call();\n        const maxSupply = await cyberDeck.methods.maxSupply().call();\n        const totalSupply = await cyberDeck.methods.totalSupply().call();\n        setPrice(price);\n        setTotalSupply(totalSupply);\n        setSupplyAvailable(maxSupply - totalSupply);\n\n        if (networkId !== 5777) {\n          setBlockchainExplorerURL(CONFIG.NETWORKS[networkId].blockchainExplorerURL);\n          setOpenseaURL(CONFIG.NETWORKS[networkId].openseaURL);\n        }\n\n        if (account) {\n          setIsLoadingUserTokens(true);\n          await getAllAllowedNFTs({\n            _account: account\n          });\n          await getOwnedTokens({\n            _account: account,\n            _cyberDeck: cyberDeck\n          });\n        }\n\n        setIsLoadingInitialData(false); // setIsLoadingCyberdeck(false);\n        // setIsLoadingUserTokens(false);\n      } catch (error) {\n        setIsError(true);\n        setMessage(\"Contract not deployed to current network, please change network in MetaMask\");\n      }\n    }\n  };\n\n  const loadWeb3 = async () => {\n    if (typeof window.ethereum !== \"undefined\" && !account) {\n      const web3 = new Web3(window.ethereum, {\n        transactionConfirmationBlocks: 1\n      });\n      setWeb3(web3);\n      const accounts = await web3.eth.getAccounts();\n\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n      } else {\n        setMessage(\"Please connect with MetaMask\");\n      }\n\n      window.ethereum.on(\"accountsChanged\", function (accounts) {\n        setAccount(accounts[0]);\n        setMessage(null);\n      });\n      window.ethereum.on(\"chainChanged\", chainId => {\n        // Handle the new chain.\n        // Correctly handling chain changes can be complicated.\n        // We recommend reloading the page unless you have good reason not to.\n        window.location.reload();\n      });\n    }\n  };\n\n  const web3Handler = async () => {\n    if (web3) {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setAccount(accounts[0]);\n    }\n  };\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData(false);\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n        value: {\n          account,\n          setAccount,\n          cyberDeck,\n          web3,\n          web3Handler,\n          supply,\n          mintNFTHandler,\n          ownedAllowedNfts,\n          ownedTokens\n        },\n        children: false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(TerminalScreen, {\n            children: /*#__PURE__*/_jsxDEV(ConnectWalletScreen, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: !clearedBootup && location.pathname.length > 1 ? /*#__PURE__*/_jsxDEV(TerminalScreen, {\n            onClick: clearMobileBootup,\n            children: /*#__PURE__*/_jsxDEV(BootupScreen, {\n              isLoadingCyberdeck: isLoadingCyberdeck,\n              isLoadingUserTokens: isLoadingUserTokens,\n              isLoadingInitialData: isLoadingInitialData,\n              account: account\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Routes, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/whitepaper\",\n              element: /*#__PURE__*/_jsxDEV(TerminalScreen, {\n                children: /*#__PURE__*/_jsxDEV(Whitepaper, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/home\",\n              element: /*#__PURE__*/_jsxDEV(TerminalScreen, {\n                children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/mint\",\n              element: /*#__PURE__*/_jsxDEV(TerminalScreen, {\n                children: /*#__PURE__*/_jsxDEV(Mint, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: isBrowser ? /*#__PURE__*/_jsxDEV(App3D, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(TerminalScreen, {\n                children: /*#__PURE__*/_jsxDEV(Whitepaper, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 17\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ZqMmJ7cj03e6EBVHjH0sj3qIVIg=\", false, function () {\n  return [useNavigate, useLocation, useKeyPress];\n});\n\n_c = App;\n\nfunction MyApp() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"app\",\n    className: \"app2d\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = MyApp;\nexport default MyApp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"MyApp\");","map":{"version":3,"sources":["/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/src/App.js"],"names":["useState","useEffect","ChakraProvider","Web3","BrowserRouter","Router","Routes","Route","Link","useNavigate","useLocation","Web3Context","CyberDeck","FakeNFT","ERC721","CONFIG","Home","BootupScreen","WidthContainer","ConnectWalletScreen","useKeyPress","Whitepaper","TerminalScreen","RoomSceneLoader","App3D","Mint","errorParser","BrowserView","MobileView","isBrowser","isMobile","allNFTS","App","navigate","location","web3","setWeb3","cyberDeck","setCyberDeck","fakeNft","setFakeNft","supplyAvailable","setSupplyAvailable","balanceOf","setBalanceOf","supply","setTotalSupply","price","setPrice","account","setAccount","currentNetwork","setCurrentNetwork","clearKeyPress","blockchainExplorerURL","setBlockchainExplorerURL","openseaURL","setOpenseaURL","isMinting","setIsMinting","isError","setIsError","message","setMessage","currentTime","setCurrentTime","Date","getTime","revealTime","setRevealTime","ownedTokens","setOwnedTokens","allowedNfts","setAllowedNfts","ownedAllowedNfts","setOwnedAllowedNfts","isLoadingInitialData","setIsLoadingInitialData","isLoadingCyberdeck","setIsLoadingCyberdeck","isLoadingUserTokens","setIsLoadingUserTokens","clearedBootup","setClearedBootup","mintNFTHandler","tokenAddress","tokenId","methods","call","buy","send","from","value","parseInt","toString","on","loadBlockchainData","e","error","window","alert","parseError","errorSet","cyberDeckErrors","getParentNft","_account","_index","_cyberDeck","tokenOfOwnerByIndex","parentNft","parentNfts","nftContract","eth","Contract","abi","ownerOfParent","ownerOf","resp","cyberDeckOwner","index","parentTokenAddress","parentTokenId","parentTokenOwner","tokenData","getNftAndMetadata","getAllowedNFT","nftAddress","_bo","otp","name","symbol","Promise","all","i","push","tIds","twd","id","address","getAllAllowedNFTs","ap","a","al","allEm","l","getOwnedTokens","_balanceOf","tokenPromises","ot","filter","clearMobileBootup","_clearedBootup","networkId","net","getId","networks","maxSupply","totalSupply","NETWORKS","loadWeb3","ethereum","transactionConfirmationBlocks","accounts","getAccounts","length","chainId","reload","web3Handler","request","method","pathname","MyApp"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport Web3 from \"web3\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  useNavigate,\n  useLocation,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport { Web3Context } from \"./contexts/Web3Context\";\nimport CyberDeck from \"./abis/CyberDeck.json\";\nimport FakeNFT from \"./abis/FakeNFT.json\";\nimport ERC721 from \"./abis/ERC721.json\";\n\nimport CONFIG from \"./config.json\";\nimport Home from \"./Pages/Home\";\nimport BootupScreen from \"./components/BootupScreen\";\nimport { WidthContainer } from \"./components/WidthContainer\";\nimport ConnectWalletScreen from \"./components/ConnectWalletScreen\";\nimport useKeyPress from \"./components/useKeyPress\";\nimport Whitepaper from \"./Pages/Whitepaper\";\nimport TerminalScreen from \"./components/TerminalScreen\";\nimport RoomSceneLoader from \"./components/RoomScene/RoomSceneLoader\";\nimport App3D from \"./App3D\";\nimport Mint from \"./Pages/Mint\";\nimport errorParser from \"./utils/errorParser\";\nimport {\n  BrowserView,\n  MobileView,\n  isBrowser,\n  isMobile,\n} from \"react-device-detect\";\n\nconst allNFTS = [\n  \"0x614e92021a82240bc73AB61e899FA75d91087964\",\n  \"0x55B2431d6Aa7AD9A726f652305f21314d636A9c6\",\n  \"0xa74C87459c8B03aB5234B4CcdD743e53DAd34f3C\",\n];\n\nfunction App() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [web3, setWeb3] = useState(null);\n  const [cyberDeck, setCyberDeck] = useState(null);\n  const [fakeNft, setFakeNft] = useState(null);\n  const [supplyAvailable, setSupplyAvailable] = useState(0);\n  const [balanceOf, setBalanceOf] = useState(0);\n  const [supply, setTotalSupply] = useState(null);\n  const [price, setPrice] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [currentNetwork, setCurrentNetwork] = useState(null);\n  const clearKeyPress = useKeyPress(\"c\");\n\n  const [blockchainExplorerURL, setBlockchainExplorerURL] = useState(\n    \"https://etherscan.io/\"\n  );\n  const [openseaURL, setOpenseaURL] = useState(\n    \"https://opensea.io/collection/hogwash-polygon\"\n  );\n\n  const [isMinting, setIsMinting] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [message, setMessage] = useState(null);\n\n  const [currentTime, setCurrentTime] = useState(new Date().getTime());\n  const [revealTime, setRevealTime] = useState(0);\n  const [ownedTokens, setOwnedTokens] = useState(null);\n  const [allowedNfts, setAllowedNfts] = useState([]);\n  const [ownedAllowedNfts, setOwnedAllowedNfts] = useState([]);\n\n  // ANIMATION CONSTS\n  const [isLoadingInitialData, setIsLoadingInitialData] = useState(false);\n  const [isLoadingCyberdeck, setIsLoadingCyberdeck] = useState(false);\n  const [isLoadingUserTokens, setIsLoadingUserTokens] = useState(false);\n  const [clearedBootup, setClearedBootup] = useState(false);\n\n  const mintNFTHandler = async ({ tokenAddress, tokenId }) => {\n    // Mint NFT\n    if (cyberDeck) {\n      setIsMinting(true);\n      setIsError(false);\n      const price = await cyberDeck.methods.price().call();\n\n      await cyberDeck.methods\n        .buy(tokenAddress, tokenId)\n        .send({\n          from: account,\n          value: parseInt(price.toString()).toString(),\n        })\n        .on(\"receipt\", async () => {\n          try {\n            await loadBlockchainData(true);\n          } catch (e) {}\n        })\n        .on(\"error\", (error) => {\n          window.alert(\n            errorParser.parseError({\n              error: error.message.toString(),\n              errorSet: errorParser.cyberDeckErrors,\n            })\n          );\n          setIsError(true);\n        });\n    }\n\n    setIsMinting(false);\n  };\n\n  async function getParentNft({ _account, _index, _cyberDeck }) {\n    try {\n      const tokenId = await _cyberDeck.methods\n        .tokenOfOwnerByIndex(_account, _index)\n        .call();\n      const parentNft = await _cyberDeck.methods.parentNfts(tokenId).call();\n      const nftContract = new web3.eth.Contract(\n        ERC721.abi,\n        parentNft.tokenAddress\n      );\n\n      const ownerOfParent = await nftContract.methods\n        .ownerOf(parentNft.tokenId)\n        .call();\n      let resp = {\n        cyberDeckOwner: _account,\n        index: _index,\n        tokenId: tokenId,\n        parentTokenAddress: parentNft.tokenAddress,\n        parentTokenId: parentNft.tokenId,\n        parentTokenOwner: ownerOfParent,\n      };\n      return { tokenData: resp };\n    } catch (e) {\n      let resp = {\n        cyberDeckOwner: _account,\n        index: _index,\n        tokenId: -1,\n        error: e,\n      };\n      return resp;\n    }\n  }\n\n  async function getNftAndMetadata({}) {}\n\n  async function getAllowedNFT({ nftAddress, _account }) {\n    try {\n      const nftContract = new web3.eth.Contract(FakeNFT.abi, nftAddress);\n      const _bo = await nftContract.methods.balanceOf(_account).call();\n      let otp = [];\n      const [name, symbol] = await Promise.all([\n        nftContract.methods.name().call(),\n        nftContract.methods.symbol().call(),\n      ]);\n      if (_bo < 1) {\n        return [];\n      }\n\n      for (let i = 0; i < _bo; i++) {\n        otp.push(nftContract.methods.tokenOfOwnerByIndex(_account, i).call());\n      }\n\n      const tIds = await Promise.all(otp);\n      let twd = [];\n      for (const id of tIds) {\n        twd.push({\n          name: name,\n          symbol: symbol,\n          address: nftAddress,\n          tokenId: id,\n        });\n      }\n      return twd;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async function getAllAllowedNFTs({ _account }) {\n    let ap = [];\n    for (const a of allNFTS) {\n      ap.push(getAllowedNFT({ nftAddress: a, _account: _account }));\n    }\n\n    const al = await Promise.all(ap);\n    let allEm = [];\n    for (const l of al) {\n      allEm = [...allEm, ...l];\n    }\n    setOwnedAllowedNfts(allEm);\n  }\n  async function getOwnedTokens({ _account, _cyberDeck }) {\n    const _balanceOf = await _cyberDeck.methods.balanceOf(_account).call();\n\n    let tokenPromises = [];\n    for (let i = 0; i < _balanceOf; i++) {\n      tokenPromises.push(\n        getParentNft({ _account: _account, _index: i, _cyberDeck: _cyberDeck })\n      );\n    }\n\n    let ot = await Promise.all(tokenPromises);\n    ot = ot.filter(\n      ({ tokenData }) =>\n        tokenData &&\n        !tokenData.error &&\n        tokenData.parentTokenOwner &&\n        tokenData.parentTokenOwner.toString() === _account.toString()\n    );\n    setOwnedTokens(ot);\n  }\n\n  useEffect(() => {\n    if (clearKeyPress && !isLoadingInitialData) {\n      setClearedBootup(true);\n    }\n  }, [clearKeyPress]);\n\n  function clearMobileBootup() {\n    if (isMobile && !isLoadingInitialData) {\n      setClearedBootup(true);\n    }\n  }\n\n  const loadBlockchainData = async (_clearedBootup) => {\n    // Fetch Contract, Data, etc.\n    if (web3) {\n      setClearedBootup(_clearedBootup);\n      setIsLoadingInitialData(true);\n      const networkId = await web3.eth.net.getId();\n      setCurrentNetwork(networkId);\n\n      try {\n        if (\n          !CyberDeck.networks[networkId] ||\n          !CyberDeck.networks[networkId].address\n        ) {\n          setIsLoadingInitialData(false);\n\n          // window.alert(\"Please Connect to the Ethereum Mainnet\");\n          return;\n        }\n        const cyberDeck = new web3.eth.Contract(\n          CyberDeck.abi,\n          CyberDeck.networks[networkId].address\n        );\n        const fakeNft = new web3.eth.Contract(\n          FakeNFT.abi,\n          FakeNFT.networks[networkId].address\n        );\n        setIsLoadingCyberdeck(true);\n\n        setCyberDeck(cyberDeck);\n        setFakeNft(fakeNft);\n        const price = await cyberDeck.methods.price().call();\n        const maxSupply = await cyberDeck.methods.maxSupply().call();\n        const totalSupply = await cyberDeck.methods.totalSupply().call();\n        setPrice(price);\n        setTotalSupply(totalSupply);\n        setSupplyAvailable(maxSupply - totalSupply);\n\n        if (networkId !== 5777) {\n          setBlockchainExplorerURL(\n            CONFIG.NETWORKS[networkId].blockchainExplorerURL\n          );\n          setOpenseaURL(CONFIG.NETWORKS[networkId].openseaURL);\n        }\n\n        if (account) {\n          setIsLoadingUserTokens(true);\n          await getAllAllowedNFTs({ _account: account });\n          await getOwnedTokens({ _account: account, _cyberDeck: cyberDeck });\n        }\n        setIsLoadingInitialData(false);\n        // setIsLoadingCyberdeck(false);\n        // setIsLoadingUserTokens(false);\n      } catch (error) {\n        setIsError(true);\n        setMessage(\n          \"Contract not deployed to current network, please change network in MetaMask\"\n        );\n      }\n    }\n  };\n  const loadWeb3 = async () => {\n    if (typeof window.ethereum !== \"undefined\" && !account) {\n      const web3 = new Web3(window.ethereum, {\n        transactionConfirmationBlocks: 1,\n      });\n      setWeb3(web3);\n\n      const accounts = await web3.eth.getAccounts();\n\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n      } else {\n        setMessage(\"Please connect with MetaMask\");\n      }\n\n      window.ethereum.on(\"accountsChanged\", function (accounts) {\n        setAccount(accounts[0]);\n        setMessage(null);\n      });\n\n      window.ethereum.on(\"chainChanged\", (chainId) => {\n        // Handle the new chain.\n        // Correctly handling chain changes can be complicated.\n        // We recommend reloading the page unless you have good reason not to.\n        window.location.reload();\n      });\n    }\n  };\n\n  const web3Handler = async () => {\n    if (web3) {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setAccount(accounts[0]);\n    }\n  };\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData(false);\n  }, [account]);\n\n  return (\n    <div className=\"App\">\n      <>\n        <Web3Context.Provider\n          value={{\n            account,\n            setAccount,\n            cyberDeck,\n            web3,\n            web3Handler,\n            supply,\n            mintNFTHandler,\n            ownedAllowedNfts,\n            ownedTokens,\n          }}\n        >\n          {false ? (\n            <>\n              <TerminalScreen>\n                <ConnectWalletScreen />\n              </TerminalScreen>\n            </>\n          ) : (\n            <>\n              {!clearedBootup && location.pathname.length > 1 ? (\n                <TerminalScreen onClick={clearMobileBootup}>\n                  <BootupScreen\n                    isLoadingCyberdeck={isLoadingCyberdeck}\n                    isLoadingUserTokens={isLoadingUserTokens}\n                    isLoadingInitialData={isLoadingInitialData}\n                    account={account}\n                  />\n                </TerminalScreen>\n              ) : (\n                <Routes>\n                  <Route\n                    path=\"/whitepaper\"\n                    element={\n                      <TerminalScreen>\n                        <Whitepaper />\n                      </TerminalScreen>\n                    }\n                  />\n                  <Route\n                    path=\"/home\"\n                    element={\n                      <TerminalScreen>\n                        <Home />\n                      </TerminalScreen>\n                    }\n                  />\n                  <Route\n                    path=\"/mint\"\n                    element={\n                      <TerminalScreen>\n                        <Mint />\n                      </TerminalScreen>\n                    }\n                  />\n                  <Route\n                    path=\"/\"\n                    element={\n                      isBrowser ? (\n                        <App3D />\n                      ) : (\n                        <TerminalScreen>\n                          <Whitepaper />\n                        </TerminalScreen>\n                      )\n                    }\n                  />\n                </Routes>\n              )}\n            </>\n          )}\n        </Web3Context.Provider>\n      </>\n    </div>\n  );\n}\n\nfunction MyApp() {\n  return (\n    <div id={\"app\"} className=\"app2d\">\n      <Router>\n        {/* <ChakraProvider> */}\n        <App />\n        {/* </ChakraProvider> */}\n      </Router>\n    </div>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}