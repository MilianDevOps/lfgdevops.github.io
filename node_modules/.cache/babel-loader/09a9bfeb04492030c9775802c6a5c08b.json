{"ast":null,"code":"import _slicedToArray from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/robertrinearson/Documents/blockchain/lfg/cyberdeck-twitter/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"selector\", \"onChange\", \"onLock\", \"onUnlock\", \"enabled\"],\n    _excluded2 = [\"camera\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport * as React from 'react';\nimport { PointerLockControls as PointerLockControls$1 } from 'three-stdlib';\nvar PointerLockControls = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var selector = _ref.selector,\n      onChange = _ref.onChange,\n      onLock = _ref.onLock,\n      onUnlock = _ref.onUnlock,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var camera = props.camera,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var gl = useThree(function (_ref2) {\n    var gl = _ref2.gl;\n    return gl;\n  });\n  var defaultCamera = useThree(function (state) {\n    return state.camera;\n  });\n  var invalidate = useThree(function (state) {\n    return state.invalidate;\n  });\n  var raycaster = useThree(function (state) {\n    return state.raycaster;\n  });\n  var events = useThree(function (state) {\n    return state.events;\n  });\n  var explCamera = camera || defaultCamera;\n  var explDomElement = gl.domElement || (typeof events.connected !== 'boolean' ? events.connected : gl.domElement);\n\n  var _React$useState = React.useState(function () {\n    return new PointerLockControls$1(explCamera);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      controls = _React$useState2[0];\n\n  React.useEffect(function () {\n    if (enabled) {\n      var callback = function callback(e) {\n        invalidate();\n        if (onChange) onChange(e);\n      };\n\n      controls.connect(explDomElement);\n      controls.addEventListener('change', callback);\n      if (onLock) controls.addEventListener('lock', onLock);\n      if (onUnlock) controls.addEventListener('unlock', onUnlock); // Force events to be centered while PLC is active\n\n      var oldComputeOffsets = raycaster.computeOffsets;\n\n      raycaster.computeOffsets = function (e) {\n        return {\n          offsetX: e.target.width / 2,\n          offsetY: e.target.height / 2\n        };\n      }; // Enforce previous interaction\n\n\n      var handler = function handler() {\n        return controls.lock();\n      };\n\n      var elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];\n      elements.forEach(function (element) {\n        return element && element.addEventListener('click', handler);\n      });\n      return function () {\n        controls.disconnect();\n        controls.removeEventListener('change', callback);\n        if (onLock) controls.addEventListener('lock', onLock);\n        if (onUnlock) controls.addEventListener('unlock', onUnlock);\n        elements.forEach(function (element) {\n          return element ? element.removeEventListener('click', handler) : undefined;\n        });\n        raycaster.computeOffsets = oldComputeOffsets;\n      };\n    }\n  }, [enabled, onChange, onLock, onUnlock, controls, invalidate, selector]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, rest));\n});\nexport { PointerLockControls };","map":null,"metadata":{},"sourceType":"module"}